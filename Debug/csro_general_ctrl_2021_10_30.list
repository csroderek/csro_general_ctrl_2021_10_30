
csro_general_ctrl_2021_10_30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080070e0  080070e0  000170e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072fc  080072fc  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  080072fc  080072fc  000172fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007304  08007304  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007304  08007304  00017304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800730c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          00004d94  200000b4  200000b4  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  20004e48  20004e48  000200b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce6d  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e47  00000000  00000000  0003cf51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  00040d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001288  00000000  00000000  000421d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025438  00000000  00000000  00043460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187f4  00000000  00000000  00068898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfcec  00000000  00000000  0008108c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00160d78  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005894  00000000  00000000  00160dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070c8 	.word	0x080070c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	080070c8 	.word	0x080070c8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5c:	f000 b96e 	b.w	8000e3c <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9d08      	ldr	r5, [sp, #32]
 8000b7e:	4604      	mov	r4, r0
 8000b80:	468c      	mov	ip, r1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f040 8083 	bne.w	8000c8e <__udivmoddi4+0x116>
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	4617      	mov	r7, r2
 8000b8c:	d947      	bls.n	8000c1e <__udivmoddi4+0xa6>
 8000b8e:	fab2 f282 	clz	r2, r2
 8000b92:	b142      	cbz	r2, 8000ba6 <__udivmoddi4+0x2e>
 8000b94:	f1c2 0020 	rsb	r0, r2, #32
 8000b98:	fa24 f000 	lsr.w	r0, r4, r0
 8000b9c:	4091      	lsls	r1, r2
 8000b9e:	4097      	lsls	r7, r2
 8000ba0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ba4:	4094      	lsls	r4, r2
 8000ba6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000baa:	0c23      	lsrs	r3, r4, #16
 8000bac:	fbbc f6f8 	udiv	r6, ip, r8
 8000bb0:	fa1f fe87 	uxth.w	lr, r7
 8000bb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000bc0:	4299      	cmp	r1, r3
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x60>
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bca:	f080 8119 	bcs.w	8000e00 <__udivmoddi4+0x288>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 8116 	bls.w	8000e00 <__udivmoddi4+0x288>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	443b      	add	r3, r7
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be0:	fb08 3310 	mls	r3, r8, r0, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d909      	bls.n	8000c04 <__udivmoddi4+0x8c>
 8000bf0:	193c      	adds	r4, r7, r4
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf6:	f080 8105 	bcs.w	8000e04 <__udivmoddi4+0x28c>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f240 8102 	bls.w	8000e04 <__udivmoddi4+0x28c>
 8000c00:	3802      	subs	r0, #2
 8000c02:	443c      	add	r4, r7
 8000c04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c08:	eba4 040e 	sub.w	r4, r4, lr
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	b11d      	cbz	r5, 8000c18 <__udivmoddi4+0xa0>
 8000c10:	40d4      	lsrs	r4, r2
 8000c12:	2300      	movs	r3, #0
 8000c14:	e9c5 4300 	strd	r4, r3, [r5]
 8000c18:	4631      	mov	r1, r6
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	b902      	cbnz	r2, 8000c22 <__udivmoddi4+0xaa>
 8000c20:	deff      	udf	#255	; 0xff
 8000c22:	fab2 f282 	clz	r2, r2
 8000c26:	2a00      	cmp	r2, #0
 8000c28:	d150      	bne.n	8000ccc <__udivmoddi4+0x154>
 8000c2a:	1bcb      	subs	r3, r1, r7
 8000c2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c30:	fa1f f887 	uxth.w	r8, r7
 8000c34:	2601      	movs	r6, #1
 8000c36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c3a:	0c21      	lsrs	r1, r4, #16
 8000c3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb08 f30c 	mul.w	r3, r8, ip
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d907      	bls.n	8000c5c <__udivmoddi4+0xe4>
 8000c4c:	1879      	adds	r1, r7, r1
 8000c4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0xe2>
 8000c54:	428b      	cmp	r3, r1
 8000c56:	f200 80e9 	bhi.w	8000e2c <__udivmoddi4+0x2b4>
 8000c5a:	4684      	mov	ip, r0
 8000c5c:	1ac9      	subs	r1, r1, r3
 8000c5e:	b2a3      	uxth	r3, r4
 8000c60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c6c:	fb08 f800 	mul.w	r8, r8, r0
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	d907      	bls.n	8000c84 <__udivmoddi4+0x10c>
 8000c74:	193c      	adds	r4, r7, r4
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x10a>
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	f200 80d9 	bhi.w	8000e34 <__udivmoddi4+0x2bc>
 8000c82:	4618      	mov	r0, r3
 8000c84:	eba4 0408 	sub.w	r4, r4, r8
 8000c88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c8c:	e7bf      	b.n	8000c0e <__udivmoddi4+0x96>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x12e>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	f000 80b1 	beq.w	8000dfa <__udivmoddi4+0x282>
 8000c98:	2600      	movs	r6, #0
 8000c9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f683 	clz	r6, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d14a      	bne.n	8000d44 <__udivmoddi4+0x1cc>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0x140>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80b8 	bhi.w	8000e28 <__udivmoddi4+0x2b0>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0103 	sbc.w	r1, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d0a8      	beq.n	8000c18 <__udivmoddi4+0xa0>
 8000cc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cca:	e7a5      	b.n	8000c18 <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000cd4:	4097      	lsls	r7, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cde:	40d9      	lsrs	r1, r3
 8000ce0:	4330      	orrs	r0, r6
 8000ce2:	0c03      	lsrs	r3, r0, #16
 8000ce4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce8:	fa1f f887 	uxth.w	r8, r7
 8000cec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb06 f108 	mul.w	r1, r6, r8
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x19c>
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d06:	f080 808d 	bcs.w	8000e24 <__udivmoddi4+0x2ac>
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	f240 808a 	bls.w	8000e24 <__udivmoddi4+0x2ac>
 8000d10:	3e02      	subs	r6, #2
 8000d12:	443b      	add	r3, r7
 8000d14:	1a5b      	subs	r3, r3, r1
 8000d16:	b281      	uxth	r1, r0
 8000d18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb00 f308 	mul.w	r3, r0, r8
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x1c4>
 8000d2c:	1879      	adds	r1, r7, r1
 8000d2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d32:	d273      	bcs.n	8000e1c <__udivmoddi4+0x2a4>
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d971      	bls.n	8000e1c <__udivmoddi4+0x2a4>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4439      	add	r1, r7
 8000d3c:	1acb      	subs	r3, r1, r3
 8000d3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d42:	e778      	b.n	8000c36 <__udivmoddi4+0xbe>
 8000d44:	f1c6 0c20 	rsb	ip, r6, #32
 8000d48:	fa03 f406 	lsl.w	r4, r3, r6
 8000d4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d50:	431c      	orrs	r4, r3
 8000d52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d56:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	0c3b      	lsrs	r3, r7, #16
 8000d66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d6a:	fa1f f884 	uxth.w	r8, r4
 8000d6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d76:	fb09 fa08 	mul.w	sl, r9, r8
 8000d7a:	458a      	cmp	sl, r1
 8000d7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000d80:	fa00 f306 	lsl.w	r3, r0, r6
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x220>
 8000d86:	1861      	adds	r1, r4, r1
 8000d88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d8c:	d248      	bcs.n	8000e20 <__udivmoddi4+0x2a8>
 8000d8e:	458a      	cmp	sl, r1
 8000d90:	d946      	bls.n	8000e20 <__udivmoddi4+0x2a8>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4421      	add	r1, r4
 8000d98:	eba1 010a 	sub.w	r1, r1, sl
 8000d9c:	b2bf      	uxth	r7, r7
 8000d9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000daa:	fb00 f808 	mul.w	r8, r0, r8
 8000dae:	45b8      	cmp	r8, r7
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x24a>
 8000db2:	19e7      	adds	r7, r4, r7
 8000db4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db8:	d22e      	bcs.n	8000e18 <__udivmoddi4+0x2a0>
 8000dba:	45b8      	cmp	r8, r7
 8000dbc:	d92c      	bls.n	8000e18 <__udivmoddi4+0x2a0>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4427      	add	r7, r4
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	eba7 0708 	sub.w	r7, r7, r8
 8000dca:	fba0 8902 	umull	r8, r9, r0, r2
 8000dce:	454f      	cmp	r7, r9
 8000dd0:	46c6      	mov	lr, r8
 8000dd2:	4649      	mov	r1, r9
 8000dd4:	d31a      	bcc.n	8000e0c <__udivmoddi4+0x294>
 8000dd6:	d017      	beq.n	8000e08 <__udivmoddi4+0x290>
 8000dd8:	b15d      	cbz	r5, 8000df2 <__udivmoddi4+0x27a>
 8000dda:	ebb3 020e 	subs.w	r2, r3, lr
 8000dde:	eb67 0701 	sbc.w	r7, r7, r1
 8000de2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000de6:	40f2      	lsrs	r2, r6
 8000de8:	ea4c 0202 	orr.w	r2, ip, r2
 8000dec:	40f7      	lsrs	r7, r6
 8000dee:	e9c5 2700 	strd	r2, r7, [r5]
 8000df2:	2600      	movs	r6, #0
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	462e      	mov	r6, r5
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	e70b      	b.n	8000c18 <__udivmoddi4+0xa0>
 8000e00:	4606      	mov	r6, r0
 8000e02:	e6e9      	b.n	8000bd8 <__udivmoddi4+0x60>
 8000e04:	4618      	mov	r0, r3
 8000e06:	e6fd      	b.n	8000c04 <__udivmoddi4+0x8c>
 8000e08:	4543      	cmp	r3, r8
 8000e0a:	d2e5      	bcs.n	8000dd8 <__udivmoddi4+0x260>
 8000e0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e10:	eb69 0104 	sbc.w	r1, r9, r4
 8000e14:	3801      	subs	r0, #1
 8000e16:	e7df      	b.n	8000dd8 <__udivmoddi4+0x260>
 8000e18:	4608      	mov	r0, r1
 8000e1a:	e7d2      	b.n	8000dc2 <__udivmoddi4+0x24a>
 8000e1c:	4660      	mov	r0, ip
 8000e1e:	e78d      	b.n	8000d3c <__udivmoddi4+0x1c4>
 8000e20:	4681      	mov	r9, r0
 8000e22:	e7b9      	b.n	8000d98 <__udivmoddi4+0x220>
 8000e24:	4666      	mov	r6, ip
 8000e26:	e775      	b.n	8000d14 <__udivmoddi4+0x19c>
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e74a      	b.n	8000cc2 <__udivmoddi4+0x14a>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	4439      	add	r1, r7
 8000e32:	e713      	b.n	8000c5c <__udivmoddi4+0xe4>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	e724      	b.n	8000c84 <__udivmoddi4+0x10c>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e52:	4b75      	ldr	r3, [pc, #468]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000e54:	4a75      	ldr	r2, [pc, #468]	; (800102c <MX_ADC1_Init+0x1ec>)
 8000e56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e58:	4b73      	ldr	r3, [pc, #460]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000e5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e60:	4b71      	ldr	r3, [pc, #452]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e66:	4b70      	ldr	r3, [pc, #448]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e6c:	4b6e      	ldr	r3, [pc, #440]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e72:	4b6d      	ldr	r3, [pc, #436]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e7a:	4b6b      	ldr	r3, [pc, #428]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e80:	4b69      	ldr	r3, [pc, #420]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000e82:	4a6b      	ldr	r2, [pc, #428]	; (8001030 <MX_ADC1_Init+0x1f0>)
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e86:	4b68      	ldr	r3, [pc, #416]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 8000e8c:	4b66      	ldr	r3, [pc, #408]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000e8e:	220d      	movs	r2, #13
 8000e90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e92:	4b65      	ldr	r3, [pc, #404]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e9a:	4b63      	ldr	r3, [pc, #396]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea0:	4861      	ldr	r0, [pc, #388]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000ea2:	f000 fedd 	bl	8001c60 <HAL_ADC_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000eac:	f000 fbc0 	bl	8001630 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000eb0:	2305      	movs	r3, #5
 8000eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000eb8:	2306      	movs	r3, #6
 8000eba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4859      	ldr	r0, [pc, #356]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000ec2:	f001 f83f 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ecc:	f000 fbb0 	bl	8001630 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ed0:	2306      	movs	r3, #6
 8000ed2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	4852      	ldr	r0, [pc, #328]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000ede:	f001 f831 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ee8:	f000 fba2 	bl	8001630 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000eec:	2308      	movs	r3, #8
 8000eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	484b      	ldr	r0, [pc, #300]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000efa:	f001 f823 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000f04:	f000 fb94 	bl	8001630 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f08:	230a      	movs	r3, #10
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f10:	463b      	mov	r3, r7
 8000f12:	4619      	mov	r1, r3
 8000f14:	4844      	ldr	r0, [pc, #272]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000f16:	f001 f815 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000f20:	f000 fb86 	bl	8001630 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f24:	230c      	movs	r3, #12
 8000f26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f28:	2305      	movs	r3, #5
 8000f2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4619      	mov	r1, r3
 8000f30:	483d      	ldr	r0, [pc, #244]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000f32:	f001 f807 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000f3c:	f000 fb78 	bl	8001630 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000f40:	230d      	movs	r3, #13
 8000f42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000f44:	2306      	movs	r3, #6
 8000f46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4836      	ldr	r0, [pc, #216]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000f4e:	f000 fff9 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000f58:	f000 fb6a 	bl	8001630 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000f60:	2307      	movs	r3, #7
 8000f62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	463b      	mov	r3, r7
 8000f66:	4619      	mov	r1, r3
 8000f68:	482f      	ldr	r0, [pc, #188]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000f6a:	f000 ffeb 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000f74:	f000 fb5c 	bl	8001630 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	4619      	mov	r1, r3
 8000f84:	4828      	ldr	r0, [pc, #160]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000f86:	f000 ffdd 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000f90:	f000 fb4e 	bl	8001630 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f94:	2304      	movs	r3, #4
 8000f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000f98:	2309      	movs	r3, #9
 8000f9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4821      	ldr	r0, [pc, #132]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000fa2:	f000 ffcf 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000fac:	f000 fb40 	bl	8001630 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fb0:	2309      	movs	r3, #9
 8000fb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	481a      	ldr	r0, [pc, #104]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000fbe:	f000 ffc1 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000fc8:	f000 fb32 	bl	8001630 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000fcc:	2310      	movs	r3, #16
 8000fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8000fd0:	230b      	movs	r3, #11
 8000fd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4813      	ldr	r0, [pc, #76]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000fda:	f000 ffb3 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8000fe4:	f000 fb24 	bl	8001630 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000fe8:	2311      	movs	r3, #17
 8000fea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8000fec:	230c      	movs	r3, #12
 8000fee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8000ff6:	f000 ffa5 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001000:	f000 fb16 	bl	8001630 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8001004:	2312      	movs	r3, #18
 8001006:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001008:	230d      	movs	r3, #13
 800100a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_ADC1_Init+0x1e8>)
 8001012:	f000 ff97 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 800101c:	f000 fb08 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20004aa4 	.word	0x20004aa4
 800102c:	40012000 	.word	0x40012000
 8001030:	0f000001 	.word	0x0f000001

08001034 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	; 0x30
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a49      	ldr	r2, [pc, #292]	; (8001178 <HAL_ADC_MspInit+0x144>)
 8001052:	4293      	cmp	r3, r2
 8001054:	f040 808c 	bne.w	8001170 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	4b47      	ldr	r3, [pc, #284]	; (800117c <HAL_ADC_MspInit+0x148>)
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	4a46      	ldr	r2, [pc, #280]	; (800117c <HAL_ADC_MspInit+0x148>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001066:	6453      	str	r3, [r2, #68]	; 0x44
 8001068:	4b44      	ldr	r3, [pc, #272]	; (800117c <HAL_ADC_MspInit+0x148>)
 800106a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001070:	61bb      	str	r3, [r7, #24]
 8001072:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	4b40      	ldr	r3, [pc, #256]	; (800117c <HAL_ADC_MspInit+0x148>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	4a3f      	ldr	r2, [pc, #252]	; (800117c <HAL_ADC_MspInit+0x148>)
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	6313      	str	r3, [r2, #48]	; 0x30
 8001084:	4b3d      	ldr	r3, [pc, #244]	; (800117c <HAL_ADC_MspInit+0x148>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	4b39      	ldr	r3, [pc, #228]	; (800117c <HAL_ADC_MspInit+0x148>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	4a38      	ldr	r2, [pc, #224]	; (800117c <HAL_ADC_MspInit+0x148>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6313      	str	r3, [r2, #48]	; 0x30
 80010a0:	4b36      	ldr	r3, [pc, #216]	; (800117c <HAL_ADC_MspInit+0x148>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	4b32      	ldr	r3, [pc, #200]	; (800117c <HAL_ADC_MspInit+0x148>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	4a31      	ldr	r2, [pc, #196]	; (800117c <HAL_ADC_MspInit+0x148>)
 80010b6:	f043 0302 	orr.w	r3, r3, #2
 80010ba:	6313      	str	r3, [r2, #48]	; 0x30
 80010bc:	4b2f      	ldr	r3, [pc, #188]	; (800117c <HAL_ADC_MspInit+0x148>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = NTC_01_Pin|NTC_02_Pin|NTC_03_Pin;
 80010c8:	230d      	movs	r3, #13
 80010ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010cc:	2303      	movs	r3, #3
 80010ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	4829      	ldr	r0, [pc, #164]	; (8001180 <HAL_ADC_MspInit+0x14c>)
 80010dc:	f001 fe24 	bl	8002d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_04_Pin|NTC_05_Pin|NTC_06_Pin|DP_01_Pin
 80010e0:	2379      	movs	r3, #121	; 0x79
 80010e2:	61fb      	str	r3, [r7, #28]
                          |DP_02_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e4:	2303      	movs	r3, #3
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4824      	ldr	r0, [pc, #144]	; (8001184 <HAL_ADC_MspInit+0x150>)
 80010f4:	f001 fe18 	bl	8002d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DP_03_Pin|VAL_FB_Pin;
 80010f8:	2303      	movs	r3, #3
 80010fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fc:	2303      	movs	r3, #3
 80010fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	481f      	ldr	r0, [pc, #124]	; (8001188 <HAL_ADC_MspInit+0x154>)
 800110c:	f001 fe0c 	bl	8002d28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <HAL_ADC_MspInit+0x158>)
 8001112:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <HAL_ADC_MspInit+0x15c>)
 8001114:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_ADC_MspInit+0x158>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_ADC_MspInit+0x158>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <HAL_ADC_MspInit+0x158>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_ADC_MspInit+0x158>)
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_ADC_MspInit+0x158>)
 8001132:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001136:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_ADC_MspInit+0x158>)
 800113a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800113e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_ADC_MspInit+0x158>)
 8001142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001146:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_ADC_MspInit+0x158>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_ADC_MspInit+0x158>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <HAL_ADC_MspInit+0x158>)
 8001156:	f001 fa77 	bl	8002648 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001160:	f000 fa66 	bl	8001630 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a09      	ldr	r2, [pc, #36]	; (800118c <HAL_ADC_MspInit+0x158>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <HAL_ADC_MspInit+0x158>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3730      	adds	r7, #48	; 0x30
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40012000 	.word	0x40012000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020800 	.word	0x40020800
 8001184:	40020000 	.word	0x40020000
 8001188:	40020400 	.word	0x40020400
 800118c:	20004aec 	.word	0x20004aec
 8001190:	40026410 	.word	0x40026410

08001194 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_DMA_Init+0x3c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <MX_DMA_Init+0x3c>)
 80011a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_DMA_Init+0x3c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2105      	movs	r1, #5
 80011ba:	2038      	movs	r0, #56	; 0x38
 80011bc:	f001 fa1a 	bl	80025f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011c0:	2038      	movs	r0, #56	; 0x38
 80011c2:	f001 fa33 	bl	800262c <HAL_NVIC_EnableIRQ>

}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 80011d8:	4a20      	ldr	r2, [pc, #128]	; (800125c <MX_FREERTOS_Init+0x88>)
 80011da:	2100      	movs	r1, #0
 80011dc:	4820      	ldr	r0, [pc, #128]	; (8001260 <MX_FREERTOS_Init+0x8c>)
 80011de:	f002 ff2d 	bl	800403c <osThreadNew>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a1f      	ldr	r2, [pc, #124]	; (8001264 <MX_FREERTOS_Init+0x90>)
 80011e6:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80011e8:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <MX_FREERTOS_Init+0x94>)
 80011ea:	2100      	movs	r1, #0
 80011ec:	481f      	ldr	r0, [pc, #124]	; (800126c <MX_FREERTOS_Init+0x98>)
 80011ee:	f002 ff25 	bl	800403c <osThreadNew>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <MX_FREERTOS_Init+0x9c>)
 80011f6:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80011f8:	4a1e      	ldr	r2, [pc, #120]	; (8001274 <MX_FREERTOS_Init+0xa0>)
 80011fa:	2100      	movs	r1, #0
 80011fc:	481e      	ldr	r0, [pc, #120]	; (8001278 <MX_FREERTOS_Init+0xa4>)
 80011fe:	f002 ff1d 	bl	800403c <osThreadNew>
 8001202:	4603      	mov	r3, r0
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <MX_FREERTOS_Init+0xa8>)
 8001206:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8001208:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <MX_FREERTOS_Init+0xac>)
 800120a:	2100      	movs	r1, #0
 800120c:	481d      	ldr	r0, [pc, #116]	; (8001284 <MX_FREERTOS_Init+0xb0>)
 800120e:	f002 ff15 	bl	800403c <osThreadNew>
 8001212:	4603      	mov	r3, r0
 8001214:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <MX_FREERTOS_Init+0xb4>)
 8001216:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 8001218:	4a1c      	ldr	r2, [pc, #112]	; (800128c <MX_FREERTOS_Init+0xb8>)
 800121a:	2100      	movs	r1, #0
 800121c:	481c      	ldr	r0, [pc, #112]	; (8001290 <MX_FREERTOS_Init+0xbc>)
 800121e:	f002 ff0d 	bl	800403c <osThreadNew>
 8001222:	4603      	mov	r3, r0
 8001224:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <MX_FREERTOS_Init+0xc0>)
 8001226:	6013      	str	r3, [r2, #0]

  /* creation of myTask06 */
  myTask06Handle = osThreadNew(StartTask06, NULL, &myTask06_attributes);
 8001228:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <MX_FREERTOS_Init+0xc4>)
 800122a:	2100      	movs	r1, #0
 800122c:	481b      	ldr	r0, [pc, #108]	; (800129c <MX_FREERTOS_Init+0xc8>)
 800122e:	f002 ff05 	bl	800403c <osThreadNew>
 8001232:	4603      	mov	r3, r0
 8001234:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <MX_FREERTOS_Init+0xcc>)
 8001236:	6013      	str	r3, [r2, #0]

  /* creation of myTask07 */
  myTask07Handle = osThreadNew(StartTask07, NULL, &myTask07_attributes);
 8001238:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <MX_FREERTOS_Init+0xd0>)
 800123a:	2100      	movs	r1, #0
 800123c:	481a      	ldr	r0, [pc, #104]	; (80012a8 <MX_FREERTOS_Init+0xd4>)
 800123e:	f002 fefd 	bl	800403c <osThreadNew>
 8001242:	4603      	mov	r3, r0
 8001244:	4a19      	ldr	r2, [pc, #100]	; (80012ac <MX_FREERTOS_Init+0xd8>)
 8001246:	6013      	str	r3, [r2, #0]

  /* creation of myTask08 */
  myTask08Handle = osThreadNew(StartTask08, NULL, &myTask08_attributes);
 8001248:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <MX_FREERTOS_Init+0xdc>)
 800124a:	2100      	movs	r1, #0
 800124c:	4819      	ldr	r0, [pc, #100]	; (80012b4 <MX_FREERTOS_Init+0xe0>)
 800124e:	f002 fef5 	bl	800403c <osThreadNew>
 8001252:	4603      	mov	r3, r0
 8001254:	4a18      	ldr	r2, [pc, #96]	; (80012b8 <MX_FREERTOS_Init+0xe4>)
 8001256:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	08007158 	.word	0x08007158
 8001260:	080012bd 	.word	0x080012bd
 8001264:	20004ba0 	.word	0x20004ba0
 8001268:	0800717c 	.word	0x0800717c
 800126c:	080012cf 	.word	0x080012cf
 8001270:	20004b94 	.word	0x20004b94
 8001274:	080071a0 	.word	0x080071a0
 8001278:	080012e1 	.word	0x080012e1
 800127c:	20004b98 	.word	0x20004b98
 8001280:	080071c4 	.word	0x080071c4
 8001284:	080012f3 	.word	0x080012f3
 8001288:	20004b60 	.word	0x20004b60
 800128c:	080071e8 	.word	0x080071e8
 8001290:	08001305 	.word	0x08001305
 8001294:	20004b5c 	.word	0x20004b5c
 8001298:	0800720c 	.word	0x0800720c
 800129c:	08001317 	.word	0x08001317
 80012a0:	20004ba4 	.word	0x20004ba4
 80012a4:	08007230 	.word	0x08007230
 80012a8:	08001329 	.word	0x08001329
 80012ac:	20004b9c 	.word	0x20004b9c
 80012b0:	08007254 	.word	0x08007254
 80012b4:	08001379 	.word	0x08001379
 80012b8:	20004b64 	.word	0x20004b64

080012bc <StartTask01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 80012c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c8:	f002 ff4a 	bl	8004160 <osDelay>
 80012cc:	e7fa      	b.n	80012c4 <StartTask01+0x8>

080012ce <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 80012d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012da:	f002 ff41 	bl	8004160 <osDelay>
 80012de:	e7fa      	b.n	80012d6 <StartTask02+0x8>

080012e0 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 80012e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ec:	f002 ff38 	bl	8004160 <osDelay>
 80012f0:	e7fa      	b.n	80012e8 <StartTask03+0x8>

080012f2 <StartTask04>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 80012fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012fe:	f002 ff2f 	bl	8004160 <osDelay>
 8001302:	e7fa      	b.n	80012fa <StartTask04+0x8>

08001304 <StartTask05>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 800130c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001310:	f002 ff26 	bl	8004160 <osDelay>
 8001314:	e7fa      	b.n	800130c <StartTask05+0x8>

08001316 <StartTask06>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 800131e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001322:	f002 ff1d 	bl	8004160 <osDelay>
 8001326:	e7fa      	b.n	800131e <StartTask06+0x8>

08001328 <StartTask07>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
  fnd_input_adc_init();
 8001330:	f000 fafc 	bl	800192c <fnd_input_adc_init>
  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 8001334:	2064      	movs	r0, #100	; 0x64
 8001336:	f002 ff13 	bl	8004160 <osDelay>
    fnd_input_gpio_read_di(di_value);
 800133a:	4809      	ldr	r0, [pc, #36]	; (8001360 <StartTask07+0x38>)
 800133c:	f000 fbaa 	bl	8001a94 <fnd_input_gpio_read_di>
    fnd_input_gpio_read_id(id_value);
 8001340:	4808      	ldr	r0, [pc, #32]	; (8001364 <StartTask07+0x3c>)
 8001342:	f000 fbd5 	bl	8001af0 <fnd_input_gpio_read_id>
    fnd_output_gpio_write_do(do_value);
 8001346:	4808      	ldr	r0, [pc, #32]	; (8001368 <StartTask07+0x40>)
 8001348:	f000 fc1e 	bl	8001b88 <fnd_output_gpio_write_do>

    fnd_input_adc_read_dp(&adc_value[0]);
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <StartTask07+0x44>)
 800134e:	f000 fafb 	bl	8001948 <fnd_input_adc_read_dp>
    fnd_input_adc_read_ntc(&adc_value[3]);
 8001352:	4807      	ldr	r0, [pc, #28]	; (8001370 <StartTask07+0x48>)
 8001354:	f000 fb18 	bl	8001988 <fnd_input_adc_read_ntc>
    fnd_input_adc_read_val_fb(&adc_value[9]);
 8001358:	4806      	ldr	r0, [pc, #24]	; (8001374 <StartTask07+0x4c>)
 800135a:	f000 fb75 	bl	8001a48 <fnd_input_adc_read_val_fb>
    osDelay(100);
 800135e:	e7e9      	b.n	8001334 <StartTask07+0xc>
 8001360:	20004b90 	.word	0x20004b90
 8001364:	20004b4c 	.word	0x20004b4c
 8001368:	20004b54 	.word	0x20004b54
 800136c:	20004b68 	.word	0x20004b68
 8001370:	20004b74 	.word	0x20004b74
 8001374:	20004b8c 	.word	0x20004b8c

08001378 <StartTask08>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask08 */
void StartTask08(void *argument)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */
  HAL_GPIO_WritePin(ETH_NRST_GPIO_Port, ETH_NRST_Pin, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <StartTask08+0x28>)
 8001388:	f001 fe82 	bl	8003090 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for (;;)
  {
    osDelay(500);
 800138c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001390:	f002 fee6 	bl	8004160 <osDelay>
    HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 8001394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <StartTask08+0x2c>)
 800139a:	f001 fe92 	bl	80030c2 <HAL_GPIO_TogglePin>
    osDelay(500);
 800139e:	e7f5      	b.n	800138c <StartTask08+0x14>
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40020800 	.word	0x40020800

080013a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <MX_GPIO_Init+0x154>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a4d      	ldr	r2, [pc, #308]	; (80014fc <MX_GPIO_Init+0x154>)
 80013c8:	f043 0310 	orr.w	r3, r3, #16
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <MX_GPIO_Init+0x154>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b47      	ldr	r3, [pc, #284]	; (80014fc <MX_GPIO_Init+0x154>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a46      	ldr	r2, [pc, #280]	; (80014fc <MX_GPIO_Init+0x154>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b44      	ldr	r3, [pc, #272]	; (80014fc <MX_GPIO_Init+0x154>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b40      	ldr	r3, [pc, #256]	; (80014fc <MX_GPIO_Init+0x154>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a3f      	ldr	r2, [pc, #252]	; (80014fc <MX_GPIO_Init+0x154>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <MX_GPIO_Init+0x154>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b39      	ldr	r3, [pc, #228]	; (80014fc <MX_GPIO_Init+0x154>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a38      	ldr	r2, [pc, #224]	; (80014fc <MX_GPIO_Init+0x154>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b36      	ldr	r3, [pc, #216]	; (80014fc <MX_GPIO_Init+0x154>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	4b32      	ldr	r3, [pc, #200]	; (80014fc <MX_GPIO_Init+0x154>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a31      	ldr	r2, [pc, #196]	; (80014fc <MX_GPIO_Init+0x154>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <MX_GPIO_Init+0x154>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RLY_05_Pin|RLY_06_Pin|ID_HC165_LD_Pin|ID_HC165_CLK_Pin
 800144a:	2200      	movs	r2, #0
 800144c:	216f      	movs	r1, #111	; 0x6f
 800144e:	482c      	ldr	r0, [pc, #176]	; (8001500 <MX_GPIO_Init+0x158>)
 8001450:	f001 fe1e 	bl	8003090 <HAL_GPIO_WritePin>
                          |RLY_03_Pin|RLY_04_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ETH_NRST_Pin|RLY_01_Pin|RLY_02_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800145a:	482a      	ldr	r0, [pc, #168]	; (8001504 <MX_GPIO_Init+0x15c>)
 800145c:	f001 fe18 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001466:	4828      	ldr	r0, [pc, #160]	; (8001508 <MX_GPIO_Init+0x160>)
 8001468:	f001 fe12 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = RLY_05_Pin|RLY_06_Pin|ID_HC165_LD_Pin|ID_HC165_CLK_Pin
 800146c:	236f      	movs	r3, #111	; 0x6f
 800146e:	617b      	str	r3, [r7, #20]
                          |RLY_03_Pin|RLY_04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	481f      	ldr	r0, [pc, #124]	; (8001500 <MX_GPIO_Init+0x158>)
 8001484:	f001 fc50 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ID_HC165_DATA_Pin;
 8001488:	2310      	movs	r3, #16
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ID_HC165_DATA_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	4819      	ldr	r0, [pc, #100]	; (8001500 <MX_GPIO_Init+0x158>)
 800149c:	f001 fc44 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ETH_NRST_Pin|RLY_01_Pin|RLY_02_Pin;
 80014a0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4812      	ldr	r0, [pc, #72]	; (8001504 <MX_GPIO_Init+0x15c>)
 80014ba:	f001 fc35 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_01_Pin;
 80014be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_01_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	480c      	ldr	r0, [pc, #48]	; (8001508 <MX_GPIO_Init+0x160>)
 80014d8:	f001 fc26 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI_04_Pin|DI_03_Pin|DI_02_Pin|DI_01_Pin;
 80014dc:	230f      	movs	r3, #15
 80014de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	4807      	ldr	r0, [pc, #28]	; (800150c <MX_GPIO_Init+0x164>)
 80014f0:	f001 fc1a 	bl	8002d28 <HAL_GPIO_Init>

}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	; 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40021000 	.word	0x40021000
 8001504:	40020400 	.word	0x40020400
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00

08001510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001514:	f000 fb62 	bl	8001bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001518:	f000 f80e 	bl	8001538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151c:	f7ff ff44 	bl	80013a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001520:	f7ff fe38 	bl	8001194 <MX_DMA_Init>
  MX_ADC1_Init();
 8001524:	f7ff fc8c 	bl	8000e40 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001528:	f002 fd3e 	bl	8003fa8 <osKernelInitialize>
  MX_FREERTOS_Init();
 800152c:	f7ff fe52 	bl	80011d4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001530:	f002 fd5e 	bl	8003ff0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001534:	e7fe      	b.n	8001534 <main+0x24>
	...

08001538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b094      	sub	sp, #80	; 0x50
 800153c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153e:	f107 0320 	add.w	r3, r7, #32
 8001542:	2230      	movs	r2, #48	; 0x30
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f005 fae2 	bl	8006b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	4b28      	ldr	r3, [pc, #160]	; (8001604 <SystemClock_Config+0xcc>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a27      	ldr	r2, [pc, #156]	; (8001604 <SystemClock_Config+0xcc>)
 8001566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <SystemClock_Config+0xcc>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <SystemClock_Config+0xd0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a21      	ldr	r2, [pc, #132]	; (8001608 <SystemClock_Config+0xd0>)
 8001582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <SystemClock_Config+0xd0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	2301      	movs	r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159c:	2310      	movs	r3, #16
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a0:	2302      	movs	r3, #2
 80015a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015a8:	2308      	movs	r3, #8
 80015aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015ac:	23a8      	movs	r3, #168	; 0xa8
 80015ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b0:	2302      	movs	r3, #2
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015b4:	2304      	movs	r3, #4
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0320 	add.w	r3, r7, #32
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 fd9b 	bl	80030f8 <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015c8:	f000 f832 	bl	8001630 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	230f      	movs	r3, #15
 80015ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d0:	2302      	movs	r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2105      	movs	r1, #5
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 fffc 	bl	80035e8 <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015f6:	f000 f81b 	bl	8001630 <Error_Handler>
  }
}
 80015fa:	bf00      	nop
 80015fc:	3750      	adds	r7, #80	; 0x50
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000

0800160c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800161e:	f000 faff 	bl	8001c20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40002000 	.word	0x40002000

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	e7fe      	b.n	8001638 <Error_Handler+0x8>
	...

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_MspInit+0x54>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a11      	ldr	r2, [pc, #68]	; (8001690 <HAL_MspInit+0x54>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_MspInit+0x54>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_MspInit+0x54>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_MspInit+0x54>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_MspInit+0x54>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	210f      	movs	r1, #15
 800167e:	f06f 0001 	mvn.w	r0, #1
 8001682:	f000 ffb7 	bl	80025f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800

08001694 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	; 0x30
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	202d      	movs	r0, #45	; 0x2d
 80016aa:	f000 ffa3 	bl	80025f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80016ae:	202d      	movs	r0, #45	; 0x2d
 80016b0:	f000 ffbc 	bl	800262c <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <HAL_InitTick+0xa4>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <HAL_InitTick+0xa4>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	6413      	str	r3, [r2, #64]	; 0x40
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <HAL_InitTick+0xa4>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016d0:	f107 0210 	add.w	r2, r7, #16
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 f940 	bl	8003960 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80016e0:	f002 f92a 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 80016e4:	4603      	mov	r3, r0
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ec:	4a13      	ldr	r2, [pc, #76]	; (800173c <HAL_InitTick+0xa8>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0c9b      	lsrs	r3, r3, #18
 80016f4:	3b01      	subs	r3, #1
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_InitTick+0xac>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <HAL_InitTick+0xb0>)
 80016fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_InitTick+0xac>)
 8001700:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001704:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_InitTick+0xac>)
 8001708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_InitTick+0xac>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_InitTick+0xac>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001718:	4809      	ldr	r0, [pc, #36]	; (8001740 <HAL_InitTick+0xac>)
 800171a:	f002 f953 	bl	80039c4 <HAL_TIM_Base_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d104      	bne.n	800172e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001724:	4806      	ldr	r0, [pc, #24]	; (8001740 <HAL_InitTick+0xac>)
 8001726:	f002 f9a7 	bl	8003a78 <HAL_TIM_Base_Start_IT>
 800172a:	4603      	mov	r3, r0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3730      	adds	r7, #48	; 0x30
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40023800 	.word	0x40023800
 800173c:	431bde83 	.word	0x431bde83
 8001740:	20004ba8 	.word	0x20004ba8
 8001744:	40002000 	.word	0x40002000

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x4>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800177a:	f002 f9ed 	bl	8003b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20004ba8 	.word	0x20004ba8

08001788 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <DMA2_Stream0_IRQHandler+0x10>)
 800178e:	f001 f861 	bl	8002854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20004aec 	.word	0x20004aec

0800179c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <SystemInit+0x20>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <SystemInit+0x20>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480d      	ldr	r0, [pc, #52]	; (80017fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017c6:	490e      	ldr	r1, [pc, #56]	; (8001800 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017dc:	4c0b      	ldr	r4, [pc, #44]	; (800180c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ea:	f7ff ffd7 	bl	800179c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f005 f95b 	bl	8006aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7ff fe8d 	bl	8001510 <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001804:	0800730c 	.word	0x0800730c
  ldr r2, =_sbss
 8001808:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 800180c:	20004e48 	.word	0x20004e48

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <get_channel_average>:
#define VAL_FB_END_CH 9

uint32_t fnd_adc_data[ADC_TOTAL_CH * DATA_PER_CH];

static float get_channel_average(uint8_t ch_idx)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
    float sum = 0;
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < DATA_PER_CH; i++)
 8001824:	2300      	movs	r3, #0
 8001826:	72fb      	strb	r3, [r7, #11]
 8001828:	e017      	b.n	800185a <get_channel_average+0x46>
    {
        sum = sum + fnd_adc_data[ch_idx + i * ADC_TOTAL_CH];
 800182a:	79f9      	ldrb	r1, [r7, #7]
 800182c:	7afa      	ldrb	r2, [r7, #11]
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	440b      	add	r3, r1
 800183a:	4a11      	ldr	r2, [pc, #68]	; (8001880 <get_channel_average+0x6c>)
 800183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001848:	ed97 7a03 	vldr	s14, [r7, #12]
 800184c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001850:	edc7 7a03 	vstr	s15, [r7, #12]
    for (uint8_t i = 0; i < DATA_PER_CH; i++)
 8001854:	7afb      	ldrb	r3, [r7, #11]
 8001856:	3301      	adds	r3, #1
 8001858:	72fb      	strb	r3, [r7, #11]
 800185a:	7afb      	ldrb	r3, [r7, #11]
 800185c:	2b09      	cmp	r3, #9
 800185e:	d9e4      	bls.n	800182a <get_channel_average+0x16>
    }
    return sum / DATA_PER_CH;
 8001860:	edd7 7a03 	vldr	s15, [r7, #12]
 8001864:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001868:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800186c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001870:	eeb0 0a67 	vmov.f32	s0, s15
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20004bf0 	.word	0x20004bf0
 8001884:	00000000 	.word	0x00000000

08001888 <calculate_ntc_temperature>:

static float calculate_ntc_temperature(double res_value, double res_ref, double b_value)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001892:	ed87 1b02 	vstr	d1, [r7, #8]
 8001896:	ed87 2b00 	vstr	d2, [r7]
    return (float)(1 / (((log(res_value / res_ref)) / b_value) + (1 / (273.15 + 25))) - 273.15);
 800189a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800189e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018a2:	f7fe ff7b 	bl	800079c <__aeabi_ddiv>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	ec43 2b17 	vmov	d7, r2, r3
 80018ae:	eeb0 0a47 	vmov.f32	s0, s14
 80018b2:	eef0 0a67 	vmov.f32	s1, s15
 80018b6:	f005 f9fb 	bl	8006cb0 <log>
 80018ba:	ec51 0b10 	vmov	r0, r1, d0
 80018be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018c2:	f7fe ff6b 	bl	800079c <__aeabi_ddiv>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	a315      	add	r3, pc, #84	; (adr r3, 8001924 <calculate_ntc_temperature+0x9c>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fc82 	bl	80001dc <__adddf3>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	f04f 0000 	mov.w	r0, #0
 80018e0:	490f      	ldr	r1, [pc, #60]	; (8001920 <calculate_ntc_temperature+0x98>)
 80018e2:	f7fe ff5b 	bl	800079c <__aeabi_ddiv>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	a30a      	add	r3, pc, #40	; (adr r3, 8001918 <calculate_ntc_temperature+0x90>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe fc70 	bl	80001d8 <__aeabi_dsub>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f8d2 	bl	8000aa8 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	ee07 3a90 	vmov	s15, r3
}
 800190a:	eeb0 0a67 	vmov.f32	s0, s15
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	f3af 8000 	nop.w
 8001918:	66666666 	.word	0x66666666
 800191c:	40711266 	.word	0x40711266
 8001920:	3ff00000 	.word	0x3ff00000
 8001924:	dcb5db83 	.word	0xdcb5db83
 8001928:	3f6b79e1 	.word	0x3f6b79e1

0800192c <fnd_input_adc_init>:

void fnd_input_adc_init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, fnd_adc_data, ADC_TOTAL_CH * DATA_PER_CH);
 8001930:	2282      	movs	r2, #130	; 0x82
 8001932:	4903      	ldr	r1, [pc, #12]	; (8001940 <fnd_input_adc_init+0x14>)
 8001934:	4803      	ldr	r0, [pc, #12]	; (8001944 <fnd_input_adc_init+0x18>)
 8001936:	f000 f9d7 	bl	8001ce8 <HAL_ADC_Start_DMA>
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20004bf0 	.word	0x20004bf0
 8001944:	20004aa4 	.word	0x20004aa4

08001948 <fnd_input_adc_read_dp>:

void fnd_input_adc_read_dp(float *values)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < (DP_END_CH - DP_START_CH + 1); i++)
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]
 8001954:	e00e      	b.n	8001974 <fnd_input_adc_read_dp+0x2c>
    {
        float dp_adc_value = get_channel_average(i + DP_START_CH);
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5b 	bl	8001814 <get_channel_average>
 800195e:	ed87 0a02 	vstr	s0, [r7, #8]
        values[i] = dp_adc_value;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < (DP_END_CH - DP_START_CH + 1); i++)
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	3301      	adds	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d9ed      	bls.n	8001956 <fnd_input_adc_read_dp+0xe>
    }
}
 800197a:	bf00      	nop
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	0000      	movs	r0, r0
	...

08001988 <fnd_input_adc_read_ntc>:

void fnd_input_adc_read_ntc(float *values)
{
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < (NTC_END_CH - NTC_START_CH + 1); i++)
 8001990:	2300      	movs	r3, #0
 8001992:	75fb      	strb	r3, [r7, #23]
 8001994:	e041      	b.n	8001a1a <fnd_input_adc_read_ntc+0x92>
    {
        float ntc_adc_value = get_channel_average(i + NTC_START_CH);
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	3303      	adds	r3, #3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff39 	bl	8001814 <get_channel_average>
 80019a2:	ed87 0a04 	vstr	s0, [r7, #16]
        float ntc_resister_value = (float)10.0 * ntc_adc_value / (4095.1 - ntc_adc_value);
 80019a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80019aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b2:	ee17 0a90 	vmov	r0, s15
 80019b6:	f7fe fd6f 	bl	8000498 <__aeabi_f2d>
 80019ba:	4604      	mov	r4, r0
 80019bc:	460d      	mov	r5, r1
 80019be:	6938      	ldr	r0, [r7, #16]
 80019c0:	f7fe fd6a 	bl	8000498 <__aeabi_f2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	a11d      	add	r1, pc, #116	; (adr r1, 8001a40 <fnd_input_adc_read_ntc+0xb8>)
 80019ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019ce:	f7fe fc03 	bl	80001d8 <__aeabi_dsub>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4620      	mov	r0, r4
 80019d8:	4629      	mov	r1, r5
 80019da:	f7fe fedf 	bl	800079c <__aeabi_ddiv>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f85f 	bl	8000aa8 <__aeabi_d2f>
 80019ea:	4603      	mov	r3, r0
 80019ec:	60fb      	str	r3, [r7, #12]
        values[i] = calculate_ntc_temperature(ntc_resister_value, 10.0, 3950);
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f7fe fd52 	bl	8000498 <__aeabi_f2d>
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	18d4      	adds	r4, r2, r3
 80019fc:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 8001a30 <fnd_input_adc_read_ntc+0xa8>
 8001a00:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8001a38 <fnd_input_adc_read_ntc+0xb0>
 8001a04:	ec41 0b10 	vmov	d0, r0, r1
 8001a08:	f7ff ff3e 	bl	8001888 <calculate_ntc_temperature>
 8001a0c:	eef0 7a40 	vmov.f32	s15, s0
 8001a10:	edc4 7a00 	vstr	s15, [r4]
    for (uint8_t i = 0; i < (NTC_END_CH - NTC_START_CH + 1); i++)
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	3301      	adds	r3, #1
 8001a18:	75fb      	strb	r3, [r7, #23]
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d9ba      	bls.n	8001996 <fnd_input_adc_read_ntc+0xe>
    }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	f3af 8000 	nop.w
 8001a30:	00000000 	.word	0x00000000
 8001a34:	40aedc00 	.word	0x40aedc00
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	40240000 	.word	0x40240000
 8001a40:	33333333 	.word	0x33333333
 8001a44:	40affe33 	.word	0x40affe33

08001a48 <fnd_input_adc_read_val_fb>:

void fnd_input_adc_read_val_fb(float *values)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < (VAL_FB_END_CH - VAL_FB_START_CH + 1); i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e014      	b.n	8001a80 <fnd_input_adc_read_val_fb+0x38>
    {
        values[i] = get_channel_average(i + VAL_FB_START_CH) / 100.0;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	3309      	adds	r3, #9
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fed9 	bl	8001814 <get_channel_average>
 8001a62:	eeb0 7a40 	vmov.f32	s14, s0
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001a90 <fnd_input_adc_read_val_fb+0x48>
 8001a72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a76:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < (VAL_FB_END_CH - VAL_FB_START_CH + 1); i++)
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0e7      	beq.n	8001a56 <fnd_input_adc_read_val_fb+0xe>
    }
}
 8001a86:	bf00      	nop
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	42c80000 	.word	0x42c80000

08001a94 <fnd_input_gpio_read_di>:

GPIO_TypeDef *gpio_input_port[4] = {DI_01_GPIO_Port, DI_02_GPIO_Port, DI_03_GPIO_Port, DI_04_GPIO_Port};
uint16_t gpio_input_pin[4] = {DI_01_Pin, DI_02_Pin, DI_03_Pin, DI_04_Pin};

void fnd_input_gpio_read_di(uint8_t *values)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 4; i++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	e019      	b.n	8001ad6 <fnd_input_gpio_read_di+0x42>
    {
        values[i] = (HAL_GPIO_ReadPin(gpio_input_port[i], gpio_input_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	4a10      	ldr	r2, [pc, #64]	; (8001ae8 <fnd_input_gpio_read_di+0x54>)
 8001aa6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	490f      	ldr	r1, [pc, #60]	; (8001aec <fnd_input_gpio_read_di+0x58>)
 8001aae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	f001 fad3 	bl	8003060 <HAL_GPIO_ReadPin>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2d9      	uxtb	r1, r3
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	460a      	mov	r2, r1
 8001ace:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d9e2      	bls.n	8001aa2 <fnd_input_gpio_read_di+0xe>
    }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000004 	.word	0x20000004
 8001aec:	20000014 	.word	0x20000014

08001af0 <fnd_input_gpio_read_id>:

void fnd_input_gpio_read_id(uint8_t *values)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(ID_HC165_LD_GPIO_Port, ID_HC165_LD_Pin, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2120      	movs	r1, #32
 8001afc:	4821      	ldr	r0, [pc, #132]	; (8001b84 <fnd_input_gpio_read_id+0x94>)
 8001afe:	f001 fac7 	bl	8003090 <HAL_GPIO_WritePin>
    osDelay(1);
 8001b02:	2001      	movs	r0, #1
 8001b04:	f002 fb2c 	bl	8004160 <osDelay>
    HAL_GPIO_WritePin(ID_HC165_LD_GPIO_Port, ID_HC165_LD_Pin, GPIO_PIN_SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2120      	movs	r1, #32
 8001b0c:	481d      	ldr	r0, [pc, #116]	; (8001b84 <fnd_input_gpio_read_id+0x94>)
 8001b0e:	f001 fabf 	bl	8003090 <HAL_GPIO_WritePin>
    values[7] = HAL_GPIO_ReadPin(ID_HC165_DATA_GPIO_Port, ID_HC165_DATA_Pin) == GPIO_PIN_SET ? 1 : 0;
 8001b12:	2110      	movs	r1, #16
 8001b14:	481b      	ldr	r0, [pc, #108]	; (8001b84 <fnd_input_gpio_read_id+0x94>)
 8001b16:	f001 faa3 	bl	8003060 <HAL_GPIO_ReadPin>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	bf0c      	ite	eq
 8001b20:	2301      	moveq	r3, #1
 8001b22:	2300      	movne	r3, #0
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3307      	adds	r3, #7
 8001b2a:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < 7; i++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e020      	b.n	8001b74 <fnd_input_gpio_read_id+0x84>
    {
        HAL_GPIO_WritePin(ID_HC165_CLK_GPIO_Port, ID_HC165_CLK_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2140      	movs	r1, #64	; 0x40
 8001b36:	4813      	ldr	r0, [pc, #76]	; (8001b84 <fnd_input_gpio_read_id+0x94>)
 8001b38:	f001 faaa 	bl	8003090 <HAL_GPIO_WritePin>
        osDelay(1);
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f002 fb0f 	bl	8004160 <osDelay>
        HAL_GPIO_WritePin(ID_HC165_CLK_GPIO_Port, ID_HC165_CLK_Pin, GPIO_PIN_SET);
 8001b42:	2201      	movs	r2, #1
 8001b44:	2140      	movs	r1, #64	; 0x40
 8001b46:	480f      	ldr	r0, [pc, #60]	; (8001b84 <fnd_input_gpio_read_id+0x94>)
 8001b48:	f001 faa2 	bl	8003090 <HAL_GPIO_WritePin>
        values[6 - i] = HAL_GPIO_ReadPin(ID_HC165_DATA_GPIO_Port, ID_HC165_DATA_Pin) == GPIO_PIN_SET ? 1 : 0;
 8001b4c:	2110      	movs	r1, #16
 8001b4e:	480d      	ldr	r0, [pc, #52]	; (8001b84 <fnd_input_gpio_read_id+0x94>)
 8001b50:	f001 fa86 	bl	8003060 <HAL_GPIO_ReadPin>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	bf0c      	ite	eq
 8001b5a:	2301      	moveq	r3, #1
 8001b5c:	2300      	movne	r3, #0
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	f1c3 0306 	rsb	r3, r3, #6
 8001b66:	4619      	mov	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	440b      	add	r3, r1
 8001b6c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 7; i++)
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	3301      	adds	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d9db      	bls.n	8001b32 <fnd_input_gpio_read_id+0x42>
    }
 8001b7a:	bf00      	nop
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000

08001b88 <fnd_output_gpio_write_do>:

GPIO_TypeDef *relay_port[6] = {RLY_01_GPIO_Port, RLY_02_GPIO_Port, RLY_03_GPIO_Port, RLY_04_GPIO_Port, RLY_05_GPIO_Port, RLY_06_GPIO_Port};
uint16_t relay_pin[6] = {RLY_01_Pin, RLY_02_Pin, RLY_03_Pin, RLY_04_Pin, RLY_05_Pin, RLY_06_Pin};

void fnd_output_gpio_write_do(uint8_t *values)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 6; i++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	e016      	b.n	8001bc4 <fnd_output_gpio_write_do+0x3c>
    {
        HAL_GPIO_WritePin(relay_port[i], relay_pin[i], (values[i] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <fnd_output_gpio_write_do+0x4c>)
 8001b9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <fnd_output_gpio_write_do+0x50>)
 8001ba2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	bf14      	ite	ne
 8001bb2:	2301      	movne	r3, #1
 8001bb4:	2300      	moveq	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f001 fa69 	bl	8003090 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 6; i++)
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	d9e5      	bls.n	8001b96 <fnd_output_gpio_write_do+0xe>
    }
}
 8001bca:	bf00      	nop
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000001c 	.word	0x2000001c
 8001bd8:	20000034 	.word	0x20000034

08001bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_Init+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <HAL_Init+0x40>)
 8001be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_Init+0x40>)
 8001bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_Init+0x40>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 fcea 	bl	80025de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f7ff fd42 	bl	8001694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fd14 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023c00 	.word	0x40023c00

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000044 	.word	0x20000044
 8001c44:	20004df8 	.word	0x20004df8

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20004df8 	.word	0x20004df8

08001c60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e033      	b.n	8001cde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff f9d8 	bl	8001034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d118      	bne.n	8001cd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ca6:	f023 0302 	bic.w	r3, r3, #2
 8001caa:	f043 0202 	orr.w	r2, r3, #2
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fa68 	bl	8002188 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f023 0303 	bic.w	r3, r3, #3
 8001cc6:	f043 0201 	orr.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
 8001cce:	e001      	b.n	8001cd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_Start_DMA+0x1e>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e0e9      	b.n	8001eda <HAL_ADC_Start_DMA+0x1f2>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d018      	beq.n	8001d4e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d2c:	4b6d      	ldr	r3, [pc, #436]	; (8001ee4 <HAL_ADC_Start_DMA+0x1fc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a6d      	ldr	r2, [pc, #436]	; (8001ee8 <HAL_ADC_Start_DMA+0x200>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	0c9a      	lsrs	r2, r3, #18
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d40:	e002      	b.n	8001d48 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f9      	bne.n	8001d42 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5c:	d107      	bne.n	8001d6e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	f040 80a1 	bne.w	8001ec0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001da8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dbc:	d106      	bne.n	8001dcc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f023 0206 	bic.w	r2, r3, #6
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
 8001dca:	e002      	b.n	8001dd2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dda:	4b44      	ldr	r3, [pc, #272]	; (8001eec <HAL_ADC_Start_DMA+0x204>)
 8001ddc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de2:	4a43      	ldr	r2, [pc, #268]	; (8001ef0 <HAL_ADC_Start_DMA+0x208>)
 8001de4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dea:	4a42      	ldr	r2, [pc, #264]	; (8001ef4 <HAL_ADC_Start_DMA+0x20c>)
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df2:	4a41      	ldr	r2, [pc, #260]	; (8001ef8 <HAL_ADC_Start_DMA+0x210>)
 8001df4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e0e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e1e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	334c      	adds	r3, #76	; 0x4c
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f000 fcb8 	bl	80027a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d12a      	bne.n	8001e96 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2d      	ldr	r2, [pc, #180]	; (8001efc <HAL_ADC_Start_DMA+0x214>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d015      	beq.n	8001e76 <HAL_ADC_Start_DMA+0x18e>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a2c      	ldr	r2, [pc, #176]	; (8001f00 <HAL_ADC_Start_DMA+0x218>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d105      	bne.n	8001e60 <HAL_ADC_Start_DMA+0x178>
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <HAL_ADC_Start_DMA+0x204>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00a      	beq.n	8001e76 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a27      	ldr	r2, [pc, #156]	; (8001f04 <HAL_ADC_Start_DMA+0x21c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d136      	bne.n	8001ed8 <HAL_ADC_Start_DMA+0x1f0>
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_ADC_Start_DMA+0x204>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d130      	bne.n	8001ed8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d129      	bne.n	8001ed8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	e020      	b.n	8001ed8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a18      	ldr	r2, [pc, #96]	; (8001efc <HAL_ADC_Start_DMA+0x214>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_ADC_Start_DMA+0x1f0>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d114      	bne.n	8001ed8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	f043 0210 	orr.w	r2, r3, #16
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	f043 0201 	orr.w	r2, r3, #1
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	431bde83 	.word	0x431bde83
 8001eec:	40012300 	.word	0x40012300
 8001ef0:	08002381 	.word	0x08002381
 8001ef4:	0800243b 	.word	0x0800243b
 8001ef8:	08002457 	.word	0x08002457
 8001efc:	40012000 	.word	0x40012000
 8001f00:	40012100 	.word	0x40012100
 8001f04:	40012200 	.word	0x40012200

08001f08 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1c>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e105      	b.n	800216c <HAL_ADC_ConfigChannel+0x228>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b09      	cmp	r3, #9
 8001f6e:	d925      	bls.n	8001fbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68d9      	ldr	r1, [r3, #12]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	3b1e      	subs	r3, #30
 8001f86:	2207      	movs	r2, #7
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	400a      	ands	r2, r1
 8001f94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68d9      	ldr	r1, [r3, #12]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	4603      	mov	r3, r0
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4403      	add	r3, r0
 8001fae:	3b1e      	subs	r3, #30
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	e022      	b.n	8002002 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6919      	ldr	r1, [r3, #16]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	400a      	ands	r2, r1
 8001fde:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6919      	ldr	r1, [r3, #16]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4403      	add	r3, r0
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b06      	cmp	r3, #6
 8002008:	d824      	bhi.n	8002054 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b05      	subs	r3, #5
 800201c:	221f      	movs	r2, #31
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	400a      	ands	r2, r1
 800202a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	4618      	mov	r0, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	3b05      	subs	r3, #5
 8002046:	fa00 f203 	lsl.w	r2, r0, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	635a      	str	r2, [r3, #52]	; 0x34
 8002052:	e04c      	b.n	80020ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b0c      	cmp	r3, #12
 800205a:	d824      	bhi.n	80020a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	3b23      	subs	r3, #35	; 0x23
 800206e:	221f      	movs	r2, #31
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43da      	mvns	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	400a      	ands	r2, r1
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	4618      	mov	r0, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	3b23      	subs	r3, #35	; 0x23
 8002098:	fa00 f203 	lsl.w	r2, r0, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	631a      	str	r2, [r3, #48]	; 0x30
 80020a4:	e023      	b.n	80020ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	3b41      	subs	r3, #65	; 0x41
 80020b8:	221f      	movs	r2, #31
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	400a      	ands	r2, r1
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	3b41      	subs	r3, #65	; 0x41
 80020e2:	fa00 f203 	lsl.w	r2, r0, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ee:	4b22      	ldr	r3, [pc, #136]	; (8002178 <HAL_ADC_ConfigChannel+0x234>)
 80020f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a21      	ldr	r2, [pc, #132]	; (800217c <HAL_ADC_ConfigChannel+0x238>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d109      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x1cc>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b12      	cmp	r3, #18
 8002102:	d105      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a19      	ldr	r2, [pc, #100]	; (800217c <HAL_ADC_ConfigChannel+0x238>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d123      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x21e>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b10      	cmp	r3, #16
 8002120:	d003      	beq.n	800212a <HAL_ADC_ConfigChannel+0x1e6>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b11      	cmp	r3, #17
 8002128:	d11b      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b10      	cmp	r3, #16
 800213c:	d111      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_ADC_ConfigChannel+0x23c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a10      	ldr	r2, [pc, #64]	; (8002184 <HAL_ADC_ConfigChannel+0x240>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	0c9a      	lsrs	r2, r3, #18
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002154:	e002      	b.n	800215c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3b01      	subs	r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f9      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40012300 	.word	0x40012300
 800217c:	40012000 	.word	0x40012000
 8002180:	20000000 	.word	0x20000000
 8002184:	431bde83 	.word	0x431bde83

08002188 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002190:	4b79      	ldr	r3, [pc, #484]	; (8002378 <ADC_Init+0x1f0>)
 8002192:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	431a      	orrs	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6859      	ldr	r1, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	021a      	lsls	r2, r3, #8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002202:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	4a58      	ldr	r2, [pc, #352]	; (800237c <ADC_Init+0x1f4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800222e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002250:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6899      	ldr	r1, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	e00f      	b.n	8002286 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002274:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002284:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0202 	bic.w	r2, r2, #2
 8002294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6899      	ldr	r1, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7e1b      	ldrb	r3, [r3, #24]
 80022a0:	005a      	lsls	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01b      	beq.n	80022ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	3b01      	subs	r3, #1
 80022e0:	035a      	lsls	r2, r3, #13
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	e007      	b.n	80022fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	3b01      	subs	r3, #1
 8002318:	051a      	lsls	r2, r3, #20
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6899      	ldr	r1, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800233e:	025a      	lsls	r2, r3, #9
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002356:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6899      	ldr	r1, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	029a      	lsls	r2, r3, #10
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	609a      	str	r2, [r3, #8]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	40012300 	.word	0x40012300
 800237c:	0f000001 	.word	0x0f000001

08002380 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002396:	2b00      	cmp	r3, #0
 8002398:	d13c      	bne.n	8002414 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d12b      	bne.n	800240c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d127      	bne.n	800240c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d119      	bne.n	800240c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0220 	bic.w	r2, r2, #32
 80023e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d105      	bne.n	800240c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f043 0201 	orr.w	r2, r3, #1
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f7ff fd7b 	bl	8001f08 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002412:	e00e      	b.n	8002432 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f7ff fd85 	bl	8001f30 <HAL_ADC_ErrorCallback>
}
 8002426:	e004      	b.n	8002432 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	4798      	blx	r3
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002446:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f7ff fd67 	bl	8001f1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f043 0204 	orr.w	r2, r3, #4
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f7ff fd5a 	bl	8001f30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b6:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <__NVIC_GetPriorityGrouping+0x18>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 0307 	and.w	r3, r3, #7
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db0b      	blt.n	8002512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	4907      	ldr	r1, [pc, #28]	; (8002520 <__NVIC_EnableIRQ+0x38>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2001      	movs	r0, #1
 800250a:	fa00 f202 	lsl.w	r2, r0, r2
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000e100 	.word	0xe000e100

08002524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	2b00      	cmp	r3, #0
 8002536:	db0a      	blt.n	800254e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	490c      	ldr	r1, [pc, #48]	; (8002570 <__NVIC_SetPriority+0x4c>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	0112      	lsls	r2, r2, #4
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	440b      	add	r3, r1
 8002548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800254c:	e00a      	b.n	8002564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4908      	ldr	r1, [pc, #32]	; (8002574 <__NVIC_SetPriority+0x50>)
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	3b04      	subs	r3, #4
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	440b      	add	r3, r1
 8002562:	761a      	strb	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000e100 	.word	0xe000e100
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f1c3 0307 	rsb	r3, r3, #7
 8002592:	2b04      	cmp	r3, #4
 8002594:	bf28      	it	cs
 8002596:	2304      	movcs	r3, #4
 8002598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3304      	adds	r3, #4
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d902      	bls.n	80025a8 <NVIC_EncodePriority+0x30>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3b03      	subs	r3, #3
 80025a6:	e000      	b.n	80025aa <NVIC_EncodePriority+0x32>
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	401a      	ands	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ca:	43d9      	mvns	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	4313      	orrs	r3, r2
         );
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ff4c 	bl	8002484 <__NVIC_SetPriorityGrouping>
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002606:	f7ff ff61 	bl	80024cc <__NVIC_GetPriorityGrouping>
 800260a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	6978      	ldr	r0, [r7, #20]
 8002612:	f7ff ffb1 	bl	8002578 <NVIC_EncodePriority>
 8002616:	4602      	mov	r2, r0
 8002618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ff80 	bl	8002524 <__NVIC_SetPriority>
}
 8002624:	bf00      	nop
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff54 	bl	80024e8 <__NVIC_EnableIRQ>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002654:	f7ff faf8 	bl	8001c48 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e099      	b.n	8002798 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002684:	e00f      	b.n	80026a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002686:	f7ff fadf 	bl	8001c48 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b05      	cmp	r3, #5
 8002692:	d908      	bls.n	80026a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2203      	movs	r2, #3
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e078      	b.n	8002798 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1e8      	bne.n	8002686 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4b38      	ldr	r3, [pc, #224]	; (80027a0 <HAL_DMA_Init+0x158>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d107      	bne.n	8002710 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	4313      	orrs	r3, r2
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f023 0307 	bic.w	r3, r3, #7
 8002726:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	2b04      	cmp	r3, #4
 8002738:	d117      	bne.n	800276a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4313      	orrs	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00e      	beq.n	800276a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fa6f 	bl	8002c30 <DMA_CheckFifoParam>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2240      	movs	r2, #64	; 0x40
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002766:	2301      	movs	r3, #1
 8002768:	e016      	b.n	8002798 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fa26 	bl	8002bc4 <DMA_CalcBaseAndBitshift>
 8002778:	4603      	mov	r3, r0
 800277a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	223f      	movs	r2, #63	; 0x3f
 8002782:	409a      	lsls	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	f010803f 	.word	0xf010803f

080027a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_DMA_Start_IT+0x26>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e040      	b.n	800284c <HAL_DMA_Start_IT+0xa8>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d12f      	bne.n	800283e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2202      	movs	r2, #2
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68b9      	ldr	r1, [r7, #8]
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f9b8 	bl	8002b68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	223f      	movs	r2, #63	; 0x3f
 80027fe:	409a      	lsls	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0216 	orr.w	r2, r2, #22
 8002812:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	2b00      	cmp	r3, #0
 800281a:	d007      	beq.n	800282c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0208 	orr.w	r2, r2, #8
 800282a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e005      	b.n	800284a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002846:	2302      	movs	r3, #2
 8002848:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800284a:	7dfb      	ldrb	r3, [r7, #23]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002860:	4b92      	ldr	r3, [pc, #584]	; (8002aac <HAL_DMA_IRQHandler+0x258>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a92      	ldr	r2, [pc, #584]	; (8002ab0 <HAL_DMA_IRQHandler+0x25c>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	0a9b      	lsrs	r3, r3, #10
 800286c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002872:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287e:	2208      	movs	r2, #8
 8002880:	409a      	lsls	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01a      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d013      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0204 	bic.w	r2, r2, #4
 80028a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	2208      	movs	r2, #8
 80028ae:	409a      	lsls	r2, r3
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b8:	f043 0201 	orr.w	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	2201      	movs	r2, #1
 80028c6:	409a      	lsls	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d012      	beq.n	80028f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	2201      	movs	r2, #1
 80028e4:	409a      	lsls	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ee:	f043 0202 	orr.w	r2, r3, #2
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fa:	2204      	movs	r2, #4
 80028fc:	409a      	lsls	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d012      	beq.n	800292c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00b      	beq.n	800292c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	2204      	movs	r2, #4
 800291a:	409a      	lsls	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002924:	f043 0204 	orr.w	r2, r3, #4
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	2210      	movs	r2, #16
 8002932:	409a      	lsls	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d043      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d03c      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	2210      	movs	r2, #16
 8002950:	409a      	lsls	r2, r3
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d018      	beq.n	8002996 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d108      	bne.n	8002984 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d024      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
 8002982:	e01f      	b.n	80029c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01b      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4798      	blx	r3
 8002994:	e016      	b.n	80029c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d107      	bne.n	80029b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0208 	bic.w	r2, r2, #8
 80029b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	2220      	movs	r2, #32
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 808e 	beq.w	8002af2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8086 	beq.w	8002af2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ea:	2220      	movs	r2, #32
 80029ec:	409a      	lsls	r2, r3
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d136      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0216 	bic.w	r2, r2, #22
 8002a0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d103      	bne.n	8002a2e <HAL_DMA_IRQHandler+0x1da>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0208 	bic.w	r2, r2, #8
 8002a3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a42:	223f      	movs	r2, #63	; 0x3f
 8002a44:	409a      	lsls	r2, r3
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d07d      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
        }
        return;
 8002a6a:	e078      	b.n	8002b5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01c      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d108      	bne.n	8002a9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d030      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
 8002a98:	e02b      	b.n	8002af2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d027      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
 8002aaa:	e022      	b.n	8002af2 <HAL_DMA_IRQHandler+0x29e>
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10f      	bne.n	8002ae2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0210 	bic.w	r2, r2, #16
 8002ad0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d032      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d022      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2205      	movs	r2, #5
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3301      	adds	r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d307      	bcc.n	8002b3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f2      	bne.n	8002b1e <HAL_DMA_IRQHandler+0x2ca>
 8002b38:	e000      	b.n	8002b3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b3a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
 8002b5c:	e000      	b.n	8002b60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b5e:	bf00      	nop
    }
  }
}
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop

08002b68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b40      	cmp	r3, #64	; 0x40
 8002b94:	d108      	bne.n	8002ba8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ba6:	e007      	b.n	8002bb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	3b10      	subs	r3, #16
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <DMA_CalcBaseAndBitshift+0x64>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bde:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <DMA_CalcBaseAndBitshift+0x68>)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4413      	add	r3, r2
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d909      	bls.n	8002c06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bfa:	f023 0303 	bic.w	r3, r3, #3
 8002bfe:	1d1a      	adds	r2, r3, #4
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	659a      	str	r2, [r3, #88]	; 0x58
 8002c04:	e007      	b.n	8002c16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c0e:	f023 0303 	bic.w	r3, r3, #3
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	aaaaaaab 	.word	0xaaaaaaab
 8002c2c:	08007290 	.word	0x08007290

08002c30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d11f      	bne.n	8002c8a <DMA_CheckFifoParam+0x5a>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d856      	bhi.n	8002cfe <DMA_CheckFifoParam+0xce>
 8002c50:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <DMA_CheckFifoParam+0x28>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c69 	.word	0x08002c69
 8002c5c:	08002c7b 	.word	0x08002c7b
 8002c60:	08002c69 	.word	0x08002c69
 8002c64:	08002cff 	.word	0x08002cff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d046      	beq.n	8002d02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c78:	e043      	b.n	8002d02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c82:	d140      	bne.n	8002d06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c88:	e03d      	b.n	8002d06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c92:	d121      	bne.n	8002cd8 <DMA_CheckFifoParam+0xa8>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d837      	bhi.n	8002d0a <DMA_CheckFifoParam+0xda>
 8002c9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <DMA_CheckFifoParam+0x70>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002cb1 	.word	0x08002cb1
 8002ca4:	08002cb7 	.word	0x08002cb7
 8002ca8:	08002cb1 	.word	0x08002cb1
 8002cac:	08002cc9 	.word	0x08002cc9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb4:	e030      	b.n	8002d18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d025      	beq.n	8002d0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc6:	e022      	b.n	8002d0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cd0:	d11f      	bne.n	8002d12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cd6:	e01c      	b.n	8002d12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d903      	bls.n	8002ce6 <DMA_CheckFifoParam+0xb6>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d003      	beq.n	8002cec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ce4:	e018      	b.n	8002d18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cea:	e015      	b.n	8002d18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00e      	beq.n	8002d16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfc:	e00b      	b.n	8002d16 <DMA_CheckFifoParam+0xe6>
      break;
 8002cfe:	bf00      	nop
 8002d00:	e00a      	b.n	8002d18 <DMA_CheckFifoParam+0xe8>
      break;
 8002d02:	bf00      	nop
 8002d04:	e008      	b.n	8002d18 <DMA_CheckFifoParam+0xe8>
      break;
 8002d06:	bf00      	nop
 8002d08:	e006      	b.n	8002d18 <DMA_CheckFifoParam+0xe8>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e004      	b.n	8002d18 <DMA_CheckFifoParam+0xe8>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e002      	b.n	8002d18 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d12:	bf00      	nop
 8002d14:	e000      	b.n	8002d18 <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
    }
  } 
  
  return status; 
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop

08002d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	e16b      	b.n	800301c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d44:	2201      	movs	r2, #1
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	f040 815a 	bne.w	8003016 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d005      	beq.n	8002d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d130      	bne.n	8002ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	2203      	movs	r2, #3
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db0:	2201      	movs	r2, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 0201 	and.w	r2, r3, #1
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d017      	beq.n	8002e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2203      	movs	r2, #3
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d123      	bne.n	8002e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	08da      	lsrs	r2, r3, #3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3208      	adds	r2, #8
 8002e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	220f      	movs	r2, #15
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	08da      	lsrs	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3208      	adds	r2, #8
 8002e66:	69b9      	ldr	r1, [r7, #24]
 8002e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	2203      	movs	r2, #3
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0203 	and.w	r2, r3, #3
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80b4 	beq.w	8003016 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	4b60      	ldr	r3, [pc, #384]	; (8003034 <HAL_GPIO_Init+0x30c>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	4a5f      	ldr	r2, [pc, #380]	; (8003034 <HAL_GPIO_Init+0x30c>)
 8002eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ebe:	4b5d      	ldr	r3, [pc, #372]	; (8003034 <HAL_GPIO_Init+0x30c>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eca:	4a5b      	ldr	r2, [pc, #364]	; (8003038 <HAL_GPIO_Init+0x310>)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	089b      	lsrs	r3, r3, #2
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	220f      	movs	r2, #15
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a52      	ldr	r2, [pc, #328]	; (800303c <HAL_GPIO_Init+0x314>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d02b      	beq.n	8002f4e <HAL_GPIO_Init+0x226>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a51      	ldr	r2, [pc, #324]	; (8003040 <HAL_GPIO_Init+0x318>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d025      	beq.n	8002f4a <HAL_GPIO_Init+0x222>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a50      	ldr	r2, [pc, #320]	; (8003044 <HAL_GPIO_Init+0x31c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01f      	beq.n	8002f46 <HAL_GPIO_Init+0x21e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4f      	ldr	r2, [pc, #316]	; (8003048 <HAL_GPIO_Init+0x320>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d019      	beq.n	8002f42 <HAL_GPIO_Init+0x21a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4e      	ldr	r2, [pc, #312]	; (800304c <HAL_GPIO_Init+0x324>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_GPIO_Init+0x216>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4d      	ldr	r2, [pc, #308]	; (8003050 <HAL_GPIO_Init+0x328>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00d      	beq.n	8002f3a <HAL_GPIO_Init+0x212>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4c      	ldr	r2, [pc, #304]	; (8003054 <HAL_GPIO_Init+0x32c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d007      	beq.n	8002f36 <HAL_GPIO_Init+0x20e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4b      	ldr	r2, [pc, #300]	; (8003058 <HAL_GPIO_Init+0x330>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_GPIO_Init+0x20a>
 8002f2e:	2307      	movs	r3, #7
 8002f30:	e00e      	b.n	8002f50 <HAL_GPIO_Init+0x228>
 8002f32:	2308      	movs	r3, #8
 8002f34:	e00c      	b.n	8002f50 <HAL_GPIO_Init+0x228>
 8002f36:	2306      	movs	r3, #6
 8002f38:	e00a      	b.n	8002f50 <HAL_GPIO_Init+0x228>
 8002f3a:	2305      	movs	r3, #5
 8002f3c:	e008      	b.n	8002f50 <HAL_GPIO_Init+0x228>
 8002f3e:	2304      	movs	r3, #4
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x228>
 8002f42:	2303      	movs	r3, #3
 8002f44:	e004      	b.n	8002f50 <HAL_GPIO_Init+0x228>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e002      	b.n	8002f50 <HAL_GPIO_Init+0x228>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_GPIO_Init+0x228>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	f002 0203 	and.w	r2, r2, #3
 8002f56:	0092      	lsls	r2, r2, #2
 8002f58:	4093      	lsls	r3, r2
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f60:	4935      	ldr	r1, [pc, #212]	; (8003038 <HAL_GPIO_Init+0x310>)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	3302      	adds	r3, #2
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f6e:	4b3b      	ldr	r3, [pc, #236]	; (800305c <HAL_GPIO_Init+0x334>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f92:	4a32      	ldr	r2, [pc, #200]	; (800305c <HAL_GPIO_Init+0x334>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f98:	4b30      	ldr	r3, [pc, #192]	; (800305c <HAL_GPIO_Init+0x334>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fbc:	4a27      	ldr	r2, [pc, #156]	; (800305c <HAL_GPIO_Init+0x334>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fc2:	4b26      	ldr	r3, [pc, #152]	; (800305c <HAL_GPIO_Init+0x334>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fe6:	4a1d      	ldr	r2, [pc, #116]	; (800305c <HAL_GPIO_Init+0x334>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fec:	4b1b      	ldr	r3, [pc, #108]	; (800305c <HAL_GPIO_Init+0x334>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003010:	4a12      	ldr	r2, [pc, #72]	; (800305c <HAL_GPIO_Init+0x334>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3301      	adds	r3, #1
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b0f      	cmp	r3, #15
 8003020:	f67f ae90 	bls.w	8002d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800
 8003038:	40013800 	.word	0x40013800
 800303c:	40020000 	.word	0x40020000
 8003040:	40020400 	.word	0x40020400
 8003044:	40020800 	.word	0x40020800
 8003048:	40020c00 	.word	0x40020c00
 800304c:	40021000 	.word	0x40021000
 8003050:	40021400 	.word	0x40021400
 8003054:	40021800 	.word	0x40021800
 8003058:	40021c00 	.word	0x40021c00
 800305c:	40013c00 	.word	0x40013c00

08003060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	e001      	b.n	8003082 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003082:	7bfb      	ldrb	r3, [r7, #15]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	807b      	strh	r3, [r7, #2]
 800309c:	4613      	mov	r3, r2
 800309e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a0:	787b      	ldrb	r3, [r7, #1]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030ac:	e003      	b.n	80030b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ae:	887b      	ldrh	r3, [r7, #2]
 80030b0:	041a      	lsls	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	619a      	str	r2, [r3, #24]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	460b      	mov	r3, r1
 80030cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030d4:	887a      	ldrh	r2, [r7, #2]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4013      	ands	r3, r2
 80030da:	041a      	lsls	r2, r3, #16
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	43d9      	mvns	r1, r3
 80030e0:	887b      	ldrh	r3, [r7, #2]
 80030e2:	400b      	ands	r3, r1
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	619a      	str	r2, [r3, #24]
}
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e264      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d075      	beq.n	8003202 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003116:	4ba3      	ldr	r3, [pc, #652]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b04      	cmp	r3, #4
 8003120:	d00c      	beq.n	800313c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003122:	4ba0      	ldr	r3, [pc, #640]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800312a:	2b08      	cmp	r3, #8
 800312c:	d112      	bne.n	8003154 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312e:	4b9d      	ldr	r3, [pc, #628]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800313a:	d10b      	bne.n	8003154 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313c:	4b99      	ldr	r3, [pc, #612]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d05b      	beq.n	8003200 <HAL_RCC_OscConfig+0x108>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d157      	bne.n	8003200 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e23f      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315c:	d106      	bne.n	800316c <HAL_RCC_OscConfig+0x74>
 800315e:	4b91      	ldr	r3, [pc, #580]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a90      	ldr	r2, [pc, #576]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e01d      	b.n	80031a8 <HAL_RCC_OscConfig+0xb0>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0x98>
 8003176:	4b8b      	ldr	r3, [pc, #556]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a8a      	ldr	r2, [pc, #552]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b88      	ldr	r3, [pc, #544]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a87      	ldr	r2, [pc, #540]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e00b      	b.n	80031a8 <HAL_RCC_OscConfig+0xb0>
 8003190:	4b84      	ldr	r3, [pc, #528]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a83      	ldr	r2, [pc, #524]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b81      	ldr	r3, [pc, #516]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a80      	ldr	r2, [pc, #512]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 80031a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fe fd4a 	bl	8001c48 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fe fd46 	bl	8001c48 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e204      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b76      	ldr	r3, [pc, #472]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0xc0>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7fe fd36 	bl	8001c48 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e0:	f7fe fd32 	bl	8001c48 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e1f0      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f2:	4b6c      	ldr	r3, [pc, #432]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0xe8>
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d063      	beq.n	80032d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800320e:	4b65      	ldr	r3, [pc, #404]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321a:	4b62      	ldr	r3, [pc, #392]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003222:	2b08      	cmp	r3, #8
 8003224:	d11c      	bne.n	8003260 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003226:	4b5f      	ldr	r3, [pc, #380]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d116      	bne.n	8003260 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003232:	4b5c      	ldr	r3, [pc, #368]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_RCC_OscConfig+0x152>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d001      	beq.n	800324a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e1c4      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324a:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4952      	ldr	r1, [pc, #328]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325e:	e03a      	b.n	80032d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d020      	beq.n	80032aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003268:	4b4f      	ldr	r3, [pc, #316]	; (80033a8 <HAL_RCC_OscConfig+0x2b0>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326e:	f7fe fceb 	bl	8001c48 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003276:	f7fe fce7 	bl	8001c48 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e1a5      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003288:	4b46      	ldr	r3, [pc, #280]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003294:	4b43      	ldr	r3, [pc, #268]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4940      	ldr	r1, [pc, #256]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	600b      	str	r3, [r1, #0]
 80032a8:	e015      	b.n	80032d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032aa:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <HAL_RCC_OscConfig+0x2b0>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fe fcca 	bl	8001c48 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b8:	f7fe fcc6 	bl	8001c48 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e184      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ca:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d030      	beq.n	8003344 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d016      	beq.n	8003318 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ea:	4b30      	ldr	r3, [pc, #192]	; (80033ac <HAL_RCC_OscConfig+0x2b4>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f0:	f7fe fcaa 	bl	8001c48 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f8:	f7fe fca6 	bl	8001c48 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e164      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330a:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800330c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x200>
 8003316:	e015      	b.n	8003344 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003318:	4b24      	ldr	r3, [pc, #144]	; (80033ac <HAL_RCC_OscConfig+0x2b4>)
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331e:	f7fe fc93 	bl	8001c48 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003326:	f7fe fc8f 	bl	8001c48 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e14d      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800333a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f0      	bne.n	8003326 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80a0 	beq.w	8003492 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10f      	bne.n	8003382 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_OscConfig+0x2b8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d121      	bne.n	80033d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_RCC_OscConfig+0x2b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <HAL_RCC_OscConfig+0x2b8>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339a:	f7fe fc55 	bl	8001c48 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	e011      	b.n	80033c6 <HAL_RCC_OscConfig+0x2ce>
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800
 80033a8:	42470000 	.word	0x42470000
 80033ac:	42470e80 	.word	0x42470e80
 80033b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b4:	f7fe fc48 	bl	8001c48 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e106      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c6:	4b85      	ldr	r3, [pc, #532]	; (80035dc <HAL_RCC_OscConfig+0x4e4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x2f0>
 80033da:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	4a80      	ldr	r2, [pc, #512]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6713      	str	r3, [r2, #112]	; 0x70
 80033e6:	e01c      	b.n	8003422 <HAL_RCC_OscConfig+0x32a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	d10c      	bne.n	800340a <HAL_RCC_OscConfig+0x312>
 80033f0:	4b7b      	ldr	r3, [pc, #492]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	4a7a      	ldr	r2, [pc, #488]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 80033f6:	f043 0304 	orr.w	r3, r3, #4
 80033fa:	6713      	str	r3, [r2, #112]	; 0x70
 80033fc:	4b78      	ldr	r3, [pc, #480]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	4a77      	ldr	r2, [pc, #476]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6713      	str	r3, [r2, #112]	; 0x70
 8003408:	e00b      	b.n	8003422 <HAL_RCC_OscConfig+0x32a>
 800340a:	4b75      	ldr	r3, [pc, #468]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	4a74      	ldr	r2, [pc, #464]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6713      	str	r3, [r2, #112]	; 0x70
 8003416:	4b72      	ldr	r3, [pc, #456]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	4a71      	ldr	r2, [pc, #452]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 800341c:	f023 0304 	bic.w	r3, r3, #4
 8003420:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d015      	beq.n	8003456 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342a:	f7fe fc0d 	bl	8001c48 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	e00a      	b.n	8003448 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7fe fc09 	bl	8001c48 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e0c5      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003448:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ee      	beq.n	8003432 <HAL_RCC_OscConfig+0x33a>
 8003454:	e014      	b.n	8003480 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003456:	f7fe fbf7 	bl	8001c48 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345c:	e00a      	b.n	8003474 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7fe fbf3 	bl	8001c48 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f241 3288 	movw	r2, #5000	; 0x1388
 800346c:	4293      	cmp	r3, r2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e0af      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003474:	4b5a      	ldr	r3, [pc, #360]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1ee      	bne.n	800345e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d105      	bne.n	8003492 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003486:	4b56      	ldr	r3, [pc, #344]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	4a55      	ldr	r2, [pc, #340]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 800348c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003490:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 809b 	beq.w	80035d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800349c:	4b50      	ldr	r3, [pc, #320]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d05c      	beq.n	8003562 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d141      	bne.n	8003534 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b0:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCC_OscConfig+0x4ec>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b6:	f7fe fbc7 	bl	8001c48 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034be:	f7fe fbc3 	bl	8001c48 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e081      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d0:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f0      	bne.n	80034be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	019b      	lsls	r3, r3, #6
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	3b01      	subs	r3, #1
 80034f6:	041b      	lsls	r3, r3, #16
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	061b      	lsls	r3, r3, #24
 8003500:	4937      	ldr	r1, [pc, #220]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003506:	4b37      	ldr	r3, [pc, #220]	; (80035e4 <HAL_RCC_OscConfig+0x4ec>)
 8003508:	2201      	movs	r2, #1
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fe fb9c 	bl	8001c48 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003514:	f7fe fb98 	bl	8001c48 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e056      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003526:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x41c>
 8003532:	e04e      	b.n	80035d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003534:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <HAL_RCC_OscConfig+0x4ec>)
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fe fb85 	bl	8001c48 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003542:	f7fe fb81 	bl	8001c48 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e03f      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003554:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f0      	bne.n	8003542 <HAL_RCC_OscConfig+0x44a>
 8003560:	e037      	b.n	80035d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e032      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800356e:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <HAL_RCC_OscConfig+0x4e8>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d028      	beq.n	80035ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d121      	bne.n	80035ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d11a      	bne.n	80035ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800359e:	4013      	ands	r3, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d111      	bne.n	80035ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	3b01      	subs	r3, #1
 80035b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40007000 	.word	0x40007000
 80035e0:	40023800 	.word	0x40023800
 80035e4:	42470060 	.word	0x42470060

080035e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0cc      	b.n	8003796 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035fc:	4b68      	ldr	r3, [pc, #416]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d90c      	bls.n	8003624 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b65      	ldr	r3, [pc, #404]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003612:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0b8      	b.n	8003796 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d020      	beq.n	8003672 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800363c:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a58      	ldr	r2, [pc, #352]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003646:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003654:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	4a52      	ldr	r2, [pc, #328]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800365e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003660:	4b50      	ldr	r3, [pc, #320]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	494d      	ldr	r1, [pc, #308]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d044      	beq.n	8003708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d119      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e07f      	b.n	8003796 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d003      	beq.n	80036a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d107      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a6:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e06f      	b.n	8003796 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b6:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e067      	b.n	8003796 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036c6:	4b37      	ldr	r3, [pc, #220]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f023 0203 	bic.w	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	4934      	ldr	r1, [pc, #208]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d8:	f7fe fab6 	bl	8001c48 <HAL_GetTick>
 80036dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e0:	f7fe fab2 	bl	8001c48 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e04f      	b.n	8003796 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f6:	4b2b      	ldr	r3, [pc, #172]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 020c 	and.w	r2, r3, #12
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	429a      	cmp	r2, r3
 8003706:	d1eb      	bne.n	80036e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003708:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d20c      	bcs.n	8003730 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e032      	b.n	8003796 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4916      	ldr	r1, [pc, #88]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800375a:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	490e      	ldr	r1, [pc, #56]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	4313      	orrs	r3, r2
 800376c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800376e:	f000 f821 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8003772:	4602      	mov	r2, r0
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	490a      	ldr	r1, [pc, #40]	; (80037a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003780:	5ccb      	ldrb	r3, [r1, r3]
 8003782:	fa22 f303 	lsr.w	r3, r2, r3
 8003786:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1c8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fd ff80 	bl	8001694 <HAL_InitTick>

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40023c00 	.word	0x40023c00
 80037a4:	40023800 	.word	0x40023800
 80037a8:	08007278 	.word	0x08007278
 80037ac:	20000000 	.word	0x20000000
 80037b0:	20000040 	.word	0x20000040

080037b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b4:	b5b0      	push	{r4, r5, r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037ba:	2100      	movs	r1, #0
 80037bc:	6079      	str	r1, [r7, #4]
 80037be:	2100      	movs	r1, #0
 80037c0:	60f9      	str	r1, [r7, #12]
 80037c2:	2100      	movs	r1, #0
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037c6:	2100      	movs	r1, #0
 80037c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ca:	4952      	ldr	r1, [pc, #328]	; (8003914 <HAL_RCC_GetSysClockFreq+0x160>)
 80037cc:	6889      	ldr	r1, [r1, #8]
 80037ce:	f001 010c 	and.w	r1, r1, #12
 80037d2:	2908      	cmp	r1, #8
 80037d4:	d00d      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80037d6:	2908      	cmp	r1, #8
 80037d8:	f200 8094 	bhi.w	8003904 <HAL_RCC_GetSysClockFreq+0x150>
 80037dc:	2900      	cmp	r1, #0
 80037de:	d002      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0x32>
 80037e0:	2904      	cmp	r1, #4
 80037e2:	d003      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x38>
 80037e4:	e08e      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037e6:	4b4c      	ldr	r3, [pc, #304]	; (8003918 <HAL_RCC_GetSysClockFreq+0x164>)
 80037e8:	60bb      	str	r3, [r7, #8]
       break;
 80037ea:	e08e      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ec:	4b4b      	ldr	r3, [pc, #300]	; (800391c <HAL_RCC_GetSysClockFreq+0x168>)
 80037ee:	60bb      	str	r3, [r7, #8]
      break;
 80037f0:	e08b      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037f2:	4948      	ldr	r1, [pc, #288]	; (8003914 <HAL_RCC_GetSysClockFreq+0x160>)
 80037f4:	6849      	ldr	r1, [r1, #4]
 80037f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80037fa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037fc:	4945      	ldr	r1, [pc, #276]	; (8003914 <HAL_RCC_GetSysClockFreq+0x160>)
 80037fe:	6849      	ldr	r1, [r1, #4]
 8003800:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003804:	2900      	cmp	r1, #0
 8003806:	d024      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003808:	4942      	ldr	r1, [pc, #264]	; (8003914 <HAL_RCC_GetSysClockFreq+0x160>)
 800380a:	6849      	ldr	r1, [r1, #4]
 800380c:	0989      	lsrs	r1, r1, #6
 800380e:	4608      	mov	r0, r1
 8003810:	f04f 0100 	mov.w	r1, #0
 8003814:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003818:	f04f 0500 	mov.w	r5, #0
 800381c:	ea00 0204 	and.w	r2, r0, r4
 8003820:	ea01 0305 	and.w	r3, r1, r5
 8003824:	493d      	ldr	r1, [pc, #244]	; (800391c <HAL_RCC_GetSysClockFreq+0x168>)
 8003826:	fb01 f003 	mul.w	r0, r1, r3
 800382a:	2100      	movs	r1, #0
 800382c:	fb01 f102 	mul.w	r1, r1, r2
 8003830:	1844      	adds	r4, r0, r1
 8003832:	493a      	ldr	r1, [pc, #232]	; (800391c <HAL_RCC_GetSysClockFreq+0x168>)
 8003834:	fba2 0101 	umull	r0, r1, r2, r1
 8003838:	1863      	adds	r3, r4, r1
 800383a:	4619      	mov	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	461a      	mov	r2, r3
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	f7fd f980 	bl	8000b48 <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4613      	mov	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	e04a      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003852:	4b30      	ldr	r3, [pc, #192]	; (8003914 <HAL_RCC_GetSysClockFreq+0x160>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	461a      	mov	r2, r3
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	ea02 0400 	and.w	r4, r2, r0
 800386a:	ea03 0501 	and.w	r5, r3, r1
 800386e:	4620      	mov	r0, r4
 8003870:	4629      	mov	r1, r5
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	014b      	lsls	r3, r1, #5
 800387c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003880:	0142      	lsls	r2, r0, #5
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	1b00      	subs	r0, r0, r4
 8003888:	eb61 0105 	sbc.w	r1, r1, r5
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	018b      	lsls	r3, r1, #6
 8003896:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800389a:	0182      	lsls	r2, r0, #6
 800389c:	1a12      	subs	r2, r2, r0
 800389e:	eb63 0301 	sbc.w	r3, r3, r1
 80038a2:	f04f 0000 	mov.w	r0, #0
 80038a6:	f04f 0100 	mov.w	r1, #0
 80038aa:	00d9      	lsls	r1, r3, #3
 80038ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038b0:	00d0      	lsls	r0, r2, #3
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	1912      	adds	r2, r2, r4
 80038b8:	eb45 0303 	adc.w	r3, r5, r3
 80038bc:	f04f 0000 	mov.w	r0, #0
 80038c0:	f04f 0100 	mov.w	r1, #0
 80038c4:	0299      	lsls	r1, r3, #10
 80038c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038ca:	0290      	lsls	r0, r2, #10
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	f7fd f934 	bl	8000b48 <__aeabi_uldivmod>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4613      	mov	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <HAL_RCC_GetSysClockFreq+0x160>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	3301      	adds	r3, #1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	60bb      	str	r3, [r7, #8]
      break;
 8003902:	e002      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <HAL_RCC_GetSysClockFreq+0x164>)
 8003906:	60bb      	str	r3, [r7, #8]
      break;
 8003908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390a:	68bb      	ldr	r3, [r7, #8]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bdb0      	pop	{r4, r5, r7, pc}
 8003914:	40023800 	.word	0x40023800
 8003918:	00f42400 	.word	0x00f42400
 800391c:	017d7840 	.word	0x017d7840

08003920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_RCC_GetHCLKFreq+0x14>)
 8003926:	681b      	ldr	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000000 	.word	0x20000000

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800393c:	f7ff fff0 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	0a9b      	lsrs	r3, r3, #10
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	; (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	08007288 	.word	0x08007288

08003960 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	220f      	movs	r2, #15
 800396e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003970:	4b12      	ldr	r3, [pc, #72]	; (80039bc <HAL_RCC_GetClockConfig+0x5c>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0203 	and.w	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <HAL_RCC_GetClockConfig+0x5c>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <HAL_RCC_GetClockConfig+0x5c>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_RCC_GetClockConfig+0x5c>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	08db      	lsrs	r3, r3, #3
 800399a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <HAL_RCC_GetClockConfig+0x60>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0207 	and.w	r2, r3, #7
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	601a      	str	r2, [r3, #0]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40023c00 	.word	0x40023c00

080039c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e041      	b.n	8003a5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f839 	bl	8003a62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 f9d8 	bl	8003db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d001      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e04e      	b.n	8003b2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a23      	ldr	r2, [pc, #140]	; (8003b3c <HAL_TIM_Base_Start_IT+0xc4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d022      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x80>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aba:	d01d      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x80>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1f      	ldr	r2, [pc, #124]	; (8003b40 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x80>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1e      	ldr	r2, [pc, #120]	; (8003b44 <HAL_TIM_Base_Start_IT+0xcc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d013      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x80>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1c      	ldr	r2, [pc, #112]	; (8003b48 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x80>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1b      	ldr	r2, [pc, #108]	; (8003b4c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x80>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a19      	ldr	r2, [pc, #100]	; (8003b50 <HAL_TIM_Base_Start_IT+0xd8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x80>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <HAL_TIM_Base_Start_IT+0xdc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d111      	bne.n	8003b1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d010      	beq.n	8003b2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1a:	e007      	b.n	8003b2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40000800 	.word	0x40000800
 8003b48:	40000c00 	.word	0x40000c00
 8003b4c:	40010400 	.word	0x40010400
 8003b50:	40014000 	.word	0x40014000
 8003b54:	40001800 	.word	0x40001800

08003b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d122      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0202 	mvn.w	r2, #2
 8003b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f8ee 	bl	8003d7c <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f8e0 	bl	8003d68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f8f1 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d122      	bne.n	8003c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d11b      	bne.n	8003c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0204 	mvn.w	r2, #4
 8003bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8c4 	bl	8003d7c <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e005      	b.n	8003c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f8b6 	bl	8003d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f8c7 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d122      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d11b      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0208 	mvn.w	r2, #8
 8003c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2204      	movs	r2, #4
 8003c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f89a 	bl	8003d7c <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f88c 	bl	8003d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f89d 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d122      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d11b      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0210 	mvn.w	r2, #16
 8003c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2208      	movs	r2, #8
 8003c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f870 	bl	8003d7c <HAL_TIM_IC_CaptureCallback>
 8003c9c:	e005      	b.n	8003caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f862 	bl	8003d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f873 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d10e      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d107      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0201 	mvn.w	r2, #1
 8003cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fd fc98 	bl	800160c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b80      	cmp	r3, #128	; 0x80
 8003ce8:	d10e      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf4:	2b80      	cmp	r3, #128	; 0x80
 8003cf6:	d107      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f902 	bl	8003f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	d10e      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d107      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f838 	bl	8003da4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d10e      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d107      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0220 	mvn.w	r2, #32
 8003d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f8cc 	bl	8003ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d60:	bf00      	nop
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a40      	ldr	r2, [pc, #256]	; (8003ecc <TIM_Base_SetConfig+0x114>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d013      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd6:	d00f      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a3d      	ldr	r2, [pc, #244]	; (8003ed0 <TIM_Base_SetConfig+0x118>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00b      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a3c      	ldr	r2, [pc, #240]	; (8003ed4 <TIM_Base_SetConfig+0x11c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d007      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a3b      	ldr	r2, [pc, #236]	; (8003ed8 <TIM_Base_SetConfig+0x120>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a3a      	ldr	r2, [pc, #232]	; (8003edc <TIM_Base_SetConfig+0x124>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d108      	bne.n	8003e0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a2f      	ldr	r2, [pc, #188]	; (8003ecc <TIM_Base_SetConfig+0x114>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d02b      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e18:	d027      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a2c      	ldr	r2, [pc, #176]	; (8003ed0 <TIM_Base_SetConfig+0x118>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d023      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a2b      	ldr	r2, [pc, #172]	; (8003ed4 <TIM_Base_SetConfig+0x11c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d01f      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a2a      	ldr	r2, [pc, #168]	; (8003ed8 <TIM_Base_SetConfig+0x120>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01b      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a29      	ldr	r2, [pc, #164]	; (8003edc <TIM_Base_SetConfig+0x124>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d017      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a28      	ldr	r2, [pc, #160]	; (8003ee0 <TIM_Base_SetConfig+0x128>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a27      	ldr	r2, [pc, #156]	; (8003ee4 <TIM_Base_SetConfig+0x12c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00f      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a26      	ldr	r2, [pc, #152]	; (8003ee8 <TIM_Base_SetConfig+0x130>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00b      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a25      	ldr	r2, [pc, #148]	; (8003eec <TIM_Base_SetConfig+0x134>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d007      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a24      	ldr	r2, [pc, #144]	; (8003ef0 <TIM_Base_SetConfig+0x138>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d003      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a23      	ldr	r2, [pc, #140]	; (8003ef4 <TIM_Base_SetConfig+0x13c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d108      	bne.n	8003e7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <TIM_Base_SetConfig+0x114>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_Base_SetConfig+0xf8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <TIM_Base_SetConfig+0x124>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d103      	bne.n	8003eb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	615a      	str	r2, [r3, #20]
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40000800 	.word	0x40000800
 8003ed8:	40000c00 	.word	0x40000c00
 8003edc:	40010400 	.word	0x40010400
 8003ee0:	40014000 	.word	0x40014000
 8003ee4:	40014400 	.word	0x40014400
 8003ee8:	40014800 	.word	0x40014800
 8003eec:	40001800 	.word	0x40001800
 8003ef0:	40001c00 	.word	0x40001c00
 8003ef4:	40002000 	.word	0x40002000

08003ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <__NVIC_SetPriority>:
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	db0a      	blt.n	8003f4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	490c      	ldr	r1, [pc, #48]	; (8003f6c <__NVIC_SetPriority+0x4c>)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	0112      	lsls	r2, r2, #4
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	440b      	add	r3, r1
 8003f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f48:	e00a      	b.n	8003f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4908      	ldr	r1, [pc, #32]	; (8003f70 <__NVIC_SetPriority+0x50>)
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	3b04      	subs	r3, #4
 8003f58:	0112      	lsls	r2, r2, #4
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	761a      	strb	r2, [r3, #24]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000e100 	.word	0xe000e100
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <SysTick_Handler+0x1c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f7c:	f001 fd28 	bl	80059d0 <xTaskGetSchedulerState>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d001      	beq.n	8003f8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003f86:	f002 fb0f 	bl	80065a8 <xPortSysTickHandler>
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	e000e010 	.word	0xe000e010

08003f94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f06f 0004 	mvn.w	r0, #4
 8003f9e:	f7ff ffbf 	bl	8003f20 <__NVIC_SetPriority>
#endif
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fae:	f3ef 8305 	mrs	r3, IPSR
 8003fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8003fb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003fba:	f06f 0305 	mvn.w	r3, #5
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	e00c      	b.n	8003fdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <osKernelInitialize+0x44>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d105      	bne.n	8003fd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003fca:	4b08      	ldr	r3, [pc, #32]	; (8003fec <osKernelInitialize+0x44>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	607b      	str	r3, [r7, #4]
 8003fd4:	e002      	b.n	8003fdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003fdc:	687b      	ldr	r3, [r7, #4]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	200000d0 	.word	0x200000d0

08003ff0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ff6:	f3ef 8305 	mrs	r3, IPSR
 8003ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8003ffc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004002:	f06f 0305 	mvn.w	r3, #5
 8004006:	607b      	str	r3, [r7, #4]
 8004008:	e010      	b.n	800402c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800400a:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <osKernelStart+0x48>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d109      	bne.n	8004026 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004012:	f7ff ffbf 	bl	8003f94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004016:	4b08      	ldr	r3, [pc, #32]	; (8004038 <osKernelStart+0x48>)
 8004018:	2202      	movs	r2, #2
 800401a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800401c:	f001 f87c 	bl	8005118 <vTaskStartScheduler>
      stat = osOK;
 8004020:	2300      	movs	r3, #0
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	e002      	b.n	800402c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800402c:	687b      	ldr	r3, [r7, #4]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	200000d0 	.word	0x200000d0

0800403c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800403c:	b580      	push	{r7, lr}
 800403e:	b08e      	sub	sp, #56	; 0x38
 8004040:	af04      	add	r7, sp, #16
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800404c:	f3ef 8305 	mrs	r3, IPSR
 8004050:	617b      	str	r3, [r7, #20]
  return(result);
 8004052:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004054:	2b00      	cmp	r3, #0
 8004056:	d17e      	bne.n	8004156 <osThreadNew+0x11a>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d07b      	beq.n	8004156 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004062:	2318      	movs	r3, #24
 8004064:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004066:	2300      	movs	r3, #0
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800406a:	f04f 33ff 	mov.w	r3, #4294967295
 800406e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d045      	beq.n	8004102 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <osThreadNew+0x48>
        name = attr->name;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <osThreadNew+0x6e>
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b38      	cmp	r3, #56	; 0x38
 800409c:	d805      	bhi.n	80040aa <osThreadNew+0x6e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <osThreadNew+0x72>
        return (NULL);
 80040aa:	2300      	movs	r3, #0
 80040ac:	e054      	b.n	8004158 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	089b      	lsrs	r3, r3, #2
 80040bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00e      	beq.n	80040e4 <osThreadNew+0xa8>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2bbb      	cmp	r3, #187	; 0xbb
 80040cc:	d90a      	bls.n	80040e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d006      	beq.n	80040e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <osThreadNew+0xa8>
        mem = 1;
 80040de:	2301      	movs	r3, #1
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	e010      	b.n	8004106 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10c      	bne.n	8004106 <osThreadNew+0xca>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d108      	bne.n	8004106 <osThreadNew+0xca>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d104      	bne.n	8004106 <osThreadNew+0xca>
          mem = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	e001      	b.n	8004106 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d110      	bne.n	800412e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004114:	9202      	str	r2, [sp, #8]
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	6a3a      	ldr	r2, [r7, #32]
 8004120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 fe0c 	bl	8004d40 <xTaskCreateStatic>
 8004128:	4603      	mov	r3, r0
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	e013      	b.n	8004156 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d110      	bne.n	8004156 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	b29a      	uxth	r2, r3
 8004138:	f107 0310 	add.w	r3, r7, #16
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fe57 	bl	8004dfa <xTaskCreate>
 800414c:	4603      	mov	r3, r0
 800414e:	2b01      	cmp	r3, #1
 8004150:	d001      	beq.n	8004156 <osThreadNew+0x11a>
            hTask = NULL;
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004156:	693b      	ldr	r3, [r7, #16]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3728      	adds	r7, #40	; 0x28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004168:	f3ef 8305 	mrs	r3, IPSR
 800416c:	60bb      	str	r3, [r7, #8]
  return(result);
 800416e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <osDelay+0x1c>
    stat = osErrorISR;
 8004174:	f06f 0305 	mvn.w	r3, #5
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	e007      	b.n	800418c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 ff92 	bl	80050b0 <vTaskDelay>
    }
  }

  return (stat);
 800418c:	68fb      	ldr	r3, [r7, #12]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80041a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4a06      	ldr	r2, [pc, #24]	; (80041c8 <vApplicationGetIdleTaskMemory+0x30>)
 80041ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	601a      	str	r2, [r3, #0]
}
 80041b6:	bf00      	nop
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	200000d4 	.word	0x200000d4
 80041c8:	20000190 	.word	0x20000190

080041cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4a07      	ldr	r2, [pc, #28]	; (80041f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80041dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4a06      	ldr	r2, [pc, #24]	; (80041fc <vApplicationGetTimerTaskMemory+0x30>)
 80041e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041ea:	601a      	str	r2, [r3, #0]
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	20000390 	.word	0x20000390
 80041fc:	2000044c 	.word	0x2000044c

08004200 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f103 0208 	add.w	r2, r3, #8
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f04f 32ff 	mov.w	r2, #4294967295
 8004218:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f103 0208 	add.w	r2, r3, #8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f103 0208 	add.w	r2, r3, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	601a      	str	r2, [r3, #0]
}
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b8:	d103      	bne.n	80042c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	e00c      	b.n	80042dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3308      	adds	r3, #8
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	e002      	b.n	80042d0 <vListInsert+0x2e>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d2f6      	bcs.n	80042ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	601a      	str	r2, [r3, #0]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6892      	ldr	r2, [r2, #8]
 800432a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6852      	ldr	r2, [r2, #4]
 8004334:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	429a      	cmp	r2, r3
 800433e:	d103      	bne.n	8004348 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	1e5a      	subs	r2, r3, #1
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800438e:	bf00      	nop
 8004390:	e7fe      	b.n	8004390 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004392:	f002 f877 	bl	8006484 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439e:	68f9      	ldr	r1, [r7, #12]
 80043a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	441a      	add	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	3b01      	subs	r3, #1
 80043c4:	68f9      	ldr	r1, [r7, #12]
 80043c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	441a      	add	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	22ff      	movs	r2, #255	; 0xff
 80043d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	22ff      	movs	r2, #255	; 0xff
 80043de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d114      	bne.n	8004412 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01a      	beq.n	8004426 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3310      	adds	r3, #16
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 f929 	bl	800564c <xTaskRemoveFromEventList>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d012      	beq.n	8004426 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <xQueueGenericReset+0xcc>)
 8004402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	e009      	b.n	8004426 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3310      	adds	r3, #16
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fef2 	bl	8004200 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3324      	adds	r3, #36	; 0x24
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff feed 	bl	8004200 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004426:	f002 f85d 	bl	80064e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800442a:	2301      	movs	r3, #1
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	e000ed04 	.word	0xe000ed04

08004438 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08e      	sub	sp, #56	; 0x38
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800444c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800445e:	bf00      	nop
 8004460:	e7fe      	b.n	8004460 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
}
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <xQueueGenericCreateStatic+0x52>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <xQueueGenericCreateStatic+0x56>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <xQueueGenericCreateStatic+0x58>
 800448e:	2300      	movs	r3, #0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	623b      	str	r3, [r7, #32]
}
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <xQueueGenericCreateStatic+0x7e>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <xQueueGenericCreateStatic+0x82>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <xQueueGenericCreateStatic+0x84>
 80044ba:	2300      	movs	r3, #0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	61fb      	str	r3, [r7, #28]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044d6:	2350      	movs	r3, #80	; 0x50
 80044d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b50      	cmp	r3, #80	; 0x50
 80044de:	d00a      	beq.n	80044f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	61bb      	str	r3, [r7, #24]
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00d      	beq.n	800451e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800450a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	4613      	mov	r3, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f805 	bl	8004528 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004520:	4618      	mov	r0, r3
 8004522:	3730      	adds	r7, #48	; 0x30
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d103      	bne.n	8004544 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	e002      	b.n	800454a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004556:	2101      	movs	r1, #1
 8004558:	69b8      	ldr	r0, [r7, #24]
 800455a:	f7ff ff05 	bl	8004368 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08e      	sub	sp, #56	; 0x38
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800457e:	2300      	movs	r3, #0
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <xQueueGenericSend+0x32>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d103      	bne.n	80045b0 <xQueueGenericSend+0x40>
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <xQueueGenericSend+0x44>
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <xQueueGenericSend+0x46>
 80045b4:	2300      	movs	r3, #0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <xQueueGenericSend+0x60>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045cc:	bf00      	nop
 80045ce:	e7fe      	b.n	80045ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d103      	bne.n	80045de <xQueueGenericSend+0x6e>
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <xQueueGenericSend+0x72>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <xQueueGenericSend+0x74>
 80045e2:	2300      	movs	r3, #0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <xQueueGenericSend+0x8e>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	623b      	str	r3, [r7, #32]
}
 80045fa:	bf00      	nop
 80045fc:	e7fe      	b.n	80045fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045fe:	f001 f9e7 	bl	80059d0 <xTaskGetSchedulerState>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <xQueueGenericSend+0x9e>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <xQueueGenericSend+0xa2>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <xQueueGenericSend+0xa4>
 8004612:	2300      	movs	r3, #0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <xQueueGenericSend+0xbe>
	__asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	61fb      	str	r3, [r7, #28]
}
 800462a:	bf00      	nop
 800462c:	e7fe      	b.n	800462c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800462e:	f001 ff29 	bl	8006484 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463a:	429a      	cmp	r2, r3
 800463c:	d302      	bcc.n	8004644 <xQueueGenericSend+0xd4>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d129      	bne.n	8004698 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800464a:	f000 fa0b 	bl	8004a64 <prvCopyDataToQueue>
 800464e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	2b00      	cmp	r3, #0
 8004656:	d010      	beq.n	800467a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	3324      	adds	r3, #36	; 0x24
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fff5 	bl	800564c <xTaskRemoveFromEventList>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d013      	beq.n	8004690 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004668:	4b3f      	ldr	r3, [pc, #252]	; (8004768 <xQueueGenericSend+0x1f8>)
 800466a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	e00a      	b.n	8004690 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d007      	beq.n	8004690 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004680:	4b39      	ldr	r3, [pc, #228]	; (8004768 <xQueueGenericSend+0x1f8>)
 8004682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004690:	f001 ff28 	bl	80064e4 <vPortExitCritical>
				return pdPASS;
 8004694:	2301      	movs	r3, #1
 8004696:	e063      	b.n	8004760 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d103      	bne.n	80046a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800469e:	f001 ff21 	bl	80064e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e05c      	b.n	8004760 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046ac:	f107 0314 	add.w	r3, r7, #20
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 f82f 	bl	8005714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046b6:	2301      	movs	r3, #1
 80046b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046ba:	f001 ff13 	bl	80064e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046be:	f000 fd9b 	bl	80051f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046c2:	f001 fedf 	bl	8006484 <vPortEnterCritical>
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046cc:	b25b      	sxtb	r3, r3
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d103      	bne.n	80046dc <xQueueGenericSend+0x16c>
 80046d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046e2:	b25b      	sxtb	r3, r3
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d103      	bne.n	80046f2 <xQueueGenericSend+0x182>
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046f2:	f001 fef7 	bl	80064e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046f6:	1d3a      	adds	r2, r7, #4
 80046f8:	f107 0314 	add.w	r3, r7, #20
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 f81e 	bl	8005740 <xTaskCheckForTimeOut>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d124      	bne.n	8004754 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800470a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800470c:	f000 faa2 	bl	8004c54 <prvIsQueueFull>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d018      	beq.n	8004748 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	3310      	adds	r3, #16
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	4611      	mov	r1, r2
 800471e:	4618      	mov	r0, r3
 8004720:	f000 ff44 	bl	80055ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004726:	f000 fa2d 	bl	8004b84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800472a:	f000 fd73 	bl	8005214 <xTaskResumeAll>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	f47f af7c 	bne.w	800462e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004736:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <xQueueGenericSend+0x1f8>)
 8004738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	e772      	b.n	800462e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800474a:	f000 fa1b 	bl	8004b84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800474e:	f000 fd61 	bl	8005214 <xTaskResumeAll>
 8004752:	e76c      	b.n	800462e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004756:	f000 fa15 	bl	8004b84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800475a:	f000 fd5b 	bl	8005214 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800475e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004760:	4618      	mov	r0, r3
 8004762:	3738      	adds	r7, #56	; 0x38
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b090      	sub	sp, #64	; 0x40
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10a      	bne.n	800479a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d103      	bne.n	80047a8 <xQueueGenericSendFromISR+0x3c>
 80047a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <xQueueGenericSendFromISR+0x40>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <xQueueGenericSendFromISR+0x42>
 80047ac:	2300      	movs	r3, #0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d103      	bne.n	80047d6 <xQueueGenericSendFromISR+0x6a>
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <xQueueGenericSendFromISR+0x6e>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <xQueueGenericSendFromISR+0x70>
 80047da:	2300      	movs	r3, #0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10a      	bne.n	80047f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	623b      	str	r3, [r7, #32]
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047f6:	f001 ff27 	bl	8006648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047fa:	f3ef 8211 	mrs	r2, BASEPRI
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	61fa      	str	r2, [r7, #28]
 8004810:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004812:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800481a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481e:	429a      	cmp	r2, r3
 8004820:	d302      	bcc.n	8004828 <xQueueGenericSendFromISR+0xbc>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b02      	cmp	r3, #2
 8004826:	d12f      	bne.n	8004888 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800482e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800483e:	f000 f911 	bl	8004a64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004842:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484a:	d112      	bne.n	8004872 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	2b00      	cmp	r3, #0
 8004852:	d016      	beq.n	8004882 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004856:	3324      	adds	r3, #36	; 0x24
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fef7 	bl	800564c <xTaskRemoveFromEventList>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00e      	beq.n	8004882 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00b      	beq.n	8004882 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	e007      	b.n	8004882 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004872:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004876:	3301      	adds	r3, #1
 8004878:	b2db      	uxtb	r3, r3
 800487a:	b25a      	sxtb	r2, r3
 800487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004882:	2301      	movs	r3, #1
 8004884:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004886:	e001      	b.n	800488c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004888:	2300      	movs	r3, #0
 800488a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800488c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004896:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800489a:	4618      	mov	r0, r3
 800489c:	3740      	adds	r7, #64	; 0x40
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08c      	sub	sp, #48	; 0x30
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048b0:	2300      	movs	r3, #0
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <xQueueReceive+0x30>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	623b      	str	r3, [r7, #32]
}
 80048d0:	bf00      	nop
 80048d2:	e7fe      	b.n	80048d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d103      	bne.n	80048e2 <xQueueReceive+0x3e>
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <xQueueReceive+0x42>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <xQueueReceive+0x44>
 80048e6:	2300      	movs	r3, #0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <xQueueReceive+0x5e>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	61fb      	str	r3, [r7, #28]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004902:	f001 f865 	bl	80059d0 <xTaskGetSchedulerState>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d102      	bne.n	8004912 <xQueueReceive+0x6e>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <xQueueReceive+0x72>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <xQueueReceive+0x74>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <xQueueReceive+0x8e>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	61bb      	str	r3, [r7, #24]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004932:	f001 fda7 	bl	8006484 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01f      	beq.n	8004982 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004942:	68b9      	ldr	r1, [r7, #8]
 8004944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004946:	f000 f8f7 	bl	8004b38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	1e5a      	subs	r2, r3, #1
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00f      	beq.n	800497a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	3310      	adds	r3, #16
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fe74 	bl	800564c <xTaskRemoveFromEventList>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800496a:	4b3d      	ldr	r3, [pc, #244]	; (8004a60 <xQueueReceive+0x1bc>)
 800496c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800497a:	f001 fdb3 	bl	80064e4 <vPortExitCritical>
				return pdPASS;
 800497e:	2301      	movs	r3, #1
 8004980:	e069      	b.n	8004a56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d103      	bne.n	8004990 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004988:	f001 fdac 	bl	80064e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800498c:	2300      	movs	r3, #0
 800498e:	e062      	b.n	8004a56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004996:	f107 0310 	add.w	r3, r7, #16
 800499a:	4618      	mov	r0, r3
 800499c:	f000 feba 	bl	8005714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049a0:	2301      	movs	r3, #1
 80049a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049a4:	f001 fd9e 	bl	80064e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049a8:	f000 fc26 	bl	80051f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049ac:	f001 fd6a 	bl	8006484 <vPortEnterCritical>
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049b6:	b25b      	sxtb	r3, r3
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d103      	bne.n	80049c6 <xQueueReceive+0x122>
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049cc:	b25b      	sxtb	r3, r3
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d2:	d103      	bne.n	80049dc <xQueueReceive+0x138>
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049dc:	f001 fd82 	bl	80064e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049e0:	1d3a      	adds	r2, r7, #4
 80049e2:	f107 0310 	add.w	r3, r7, #16
 80049e6:	4611      	mov	r1, r2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fea9 	bl	8005740 <xTaskCheckForTimeOut>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d123      	bne.n	8004a3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f6:	f000 f917 	bl	8004c28 <prvIsQueueEmpty>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d017      	beq.n	8004a30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	3324      	adds	r3, #36	; 0x24
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4611      	mov	r1, r2
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fdcf 	bl	80055ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a10:	f000 f8b8 	bl	8004b84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a14:	f000 fbfe 	bl	8005214 <xTaskResumeAll>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d189      	bne.n	8004932 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004a1e:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <xQueueReceive+0x1bc>)
 8004a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	e780      	b.n	8004932 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a32:	f000 f8a7 	bl	8004b84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a36:	f000 fbed 	bl	8005214 <xTaskResumeAll>
 8004a3a:	e77a      	b.n	8004932 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a3e:	f000 f8a1 	bl	8004b84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a42:	f000 fbe7 	bl	8005214 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a48:	f000 f8ee 	bl	8004c28 <prvIsQueueEmpty>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f43f af6f 	beq.w	8004932 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3730      	adds	r7, #48	; 0x30
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	e000ed04 	.word	0xe000ed04

08004a64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10d      	bne.n	8004a9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d14d      	bne.n	8004b26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 ffbc 	bl	8005a0c <xTaskPriorityDisinherit>
 8004a94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	e043      	b.n	8004b26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d119      	bne.n	8004ad8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6858      	ldr	r0, [r3, #4]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	461a      	mov	r2, r3
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	f002 f820 	bl	8006af4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	441a      	add	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d32b      	bcc.n	8004b26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	605a      	str	r2, [r3, #4]
 8004ad6:	e026      	b.n	8004b26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	68d8      	ldr	r0, [r3, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	f002 f806 	bl	8006af4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	425b      	negs	r3, r3
 8004af2:	441a      	add	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d207      	bcs.n	8004b14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	425b      	negs	r3, r3
 8004b0e:	441a      	add	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d105      	bne.n	8004b26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b2e:	697b      	ldr	r3, [r7, #20]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d018      	beq.n	8004b7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	441a      	add	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d303      	bcc.n	8004b6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68d9      	ldr	r1, [r3, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	461a      	mov	r2, r3
 8004b76:	6838      	ldr	r0, [r7, #0]
 8004b78:	f001 ffbc 	bl	8006af4 <memcpy>
	}
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b8c:	f001 fc7a 	bl	8006484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b98:	e011      	b.n	8004bbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d012      	beq.n	8004bc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3324      	adds	r3, #36	; 0x24
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fd50 	bl	800564c <xTaskRemoveFromEventList>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bb2:	f000 fe27 	bl	8005804 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	dce9      	bgt.n	8004b9a <prvUnlockQueue+0x16>
 8004bc6:	e000      	b.n	8004bca <prvUnlockQueue+0x46>
					break;
 8004bc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	22ff      	movs	r2, #255	; 0xff
 8004bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004bd2:	f001 fc87 	bl	80064e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bd6:	f001 fc55 	bl	8006484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004be0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004be2:	e011      	b.n	8004c08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d012      	beq.n	8004c12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3310      	adds	r3, #16
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fd2b 	bl	800564c <xTaskRemoveFromEventList>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bfc:	f000 fe02 	bl	8005804 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c00:	7bbb      	ldrb	r3, [r7, #14]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	dce9      	bgt.n	8004be4 <prvUnlockQueue+0x60>
 8004c10:	e000      	b.n	8004c14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	22ff      	movs	r2, #255	; 0xff
 8004c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c1c:	f001 fc62 	bl	80064e4 <vPortExitCritical>
}
 8004c20:	bf00      	nop
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c30:	f001 fc28 	bl	8006484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d102      	bne.n	8004c42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	e001      	b.n	8004c46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c46:	f001 fc4d 	bl	80064e4 <vPortExitCritical>

	return xReturn;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c5c:	f001 fc12 	bl	8006484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d102      	bne.n	8004c72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e001      	b.n	8004c76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c76:	f001 fc35 	bl	80064e4 <vPortExitCritical>

	return xReturn;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	e014      	b.n	8004cbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c94:	4a0f      	ldr	r2, [pc, #60]	; (8004cd4 <vQueueAddToRegistry+0x50>)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ca0:	490c      	ldr	r1, [pc, #48]	; (8004cd4 <vQueueAddToRegistry+0x50>)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004caa:	4a0a      	ldr	r2, [pc, #40]	; (8004cd4 <vQueueAddToRegistry+0x50>)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004cb6:	e006      	b.n	8004cc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b07      	cmp	r3, #7
 8004cc2:	d9e7      	bls.n	8004c94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20004dfc 	.word	0x20004dfc

08004cd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ce8:	f001 fbcc 	bl	8006484 <vPortEnterCritical>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cf2:	b25b      	sxtb	r3, r3
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d103      	bne.n	8004d02 <vQueueWaitForMessageRestricted+0x2a>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d08:	b25b      	sxtb	r3, r3
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d103      	bne.n	8004d18 <vQueueWaitForMessageRestricted+0x40>
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d18:	f001 fbe4 	bl	80064e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d106      	bne.n	8004d32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	3324      	adds	r3, #36	; 0x24
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fc61 	bl	80055f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d32:	6978      	ldr	r0, [r7, #20]
 8004d34:	f7ff ff26 	bl	8004b84 <prvUnlockQueue>
	}
 8004d38:	bf00      	nop
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08e      	sub	sp, #56	; 0x38
 8004d44:	af04      	add	r7, sp, #16
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	623b      	str	r3, [r7, #32]
}
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <xTaskCreateStatic+0x46>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	61fb      	str	r3, [r7, #28]
}
 8004d82:	bf00      	nop
 8004d84:	e7fe      	b.n	8004d84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d86:	23bc      	movs	r3, #188	; 0xbc
 8004d88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2bbc      	cmp	r3, #188	; 0xbc
 8004d8e:	d00a      	beq.n	8004da6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	61bb      	str	r3, [r7, #24]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004da6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01e      	beq.n	8004dec <xTaskCreateStatic+0xac>
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01b      	beq.n	8004dec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9303      	str	r3, [sp, #12]
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	9302      	str	r3, [sp, #8]
 8004dce:	f107 0314 	add.w	r3, r7, #20
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f850 	bl	8004e84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004de4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004de6:	f000 f8f3 	bl	8004fd0 <prvAddNewTaskToReadyList>
 8004dea:	e001      	b.n	8004df0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004df0:	697b      	ldr	r3, [r7, #20]
	}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3728      	adds	r7, #40	; 0x28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b08c      	sub	sp, #48	; 0x30
 8004dfe:	af04      	add	r7, sp, #16
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	4613      	mov	r3, r2
 8004e08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e0a:	88fb      	ldrh	r3, [r7, #6]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 fc5a 	bl	80066c8 <pvPortMalloc>
 8004e14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00e      	beq.n	8004e3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e1c:	20bc      	movs	r0, #188	; 0xbc
 8004e1e:	f001 fc53 	bl	80066c8 <pvPortMalloc>
 8004e22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004e30:	e005      	b.n	8004e3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e32:	6978      	ldr	r0, [r7, #20]
 8004e34:	f001 fd14 	bl	8006860 <vPortFree>
 8004e38:	e001      	b.n	8004e3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d017      	beq.n	8004e74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e4c:	88fa      	ldrh	r2, [r7, #6]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	9303      	str	r3, [sp, #12]
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	9302      	str	r3, [sp, #8]
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	9301      	str	r3, [sp, #4]
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f80e 	bl	8004e84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e68:	69f8      	ldr	r0, [r7, #28]
 8004e6a:	f000 f8b1 	bl	8004fd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	e002      	b.n	8004e7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e74:	f04f 33ff 	mov.w	r3, #4294967295
 8004e78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e7a:	69bb      	ldr	r3, [r7, #24]
	}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3720      	adds	r7, #32
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	21a5      	movs	r1, #165	; 0xa5
 8004e9e:	f001 fe37 	bl	8006b10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004eac:	3b01      	subs	r3, #1
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f023 0307 	bic.w	r3, r3, #7
 8004eba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <prvInitialiseNewTask+0x58>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	617b      	str	r3, [r7, #20]
}
 8004ed8:	bf00      	nop
 8004eda:	e7fe      	b.n	8004eda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01f      	beq.n	8004f22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]
 8004ee6:	e012      	b.n	8004f0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	7819      	ldrb	r1, [r3, #0]
 8004ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3334      	adds	r3, #52	; 0x34
 8004ef8:	460a      	mov	r2, r1
 8004efa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d006      	beq.n	8004f16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	2b0f      	cmp	r3, #15
 8004f12:	d9e9      	bls.n	8004ee8 <prvInitialiseNewTask+0x64>
 8004f14:	e000      	b.n	8004f18 <prvInitialiseNewTask+0x94>
			{
				break;
 8004f16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f20:	e003      	b.n	8004f2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	2b37      	cmp	r3, #55	; 0x37
 8004f2e:	d901      	bls.n	8004f34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f30:	2337      	movs	r3, #55	; 0x37
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	2200      	movs	r2, #0
 8004f44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	3304      	adds	r3, #4
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff f978 	bl	8004240 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	3318      	adds	r3, #24
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff f973 	bl	8004240 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	3354      	adds	r3, #84	; 0x54
 8004f84:	2260      	movs	r2, #96	; 0x60
 8004f86:	2100      	movs	r1, #0
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f001 fdc1 	bl	8006b10 <memset>
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	4a0c      	ldr	r2, [pc, #48]	; (8004fc4 <prvInitialiseNewTask+0x140>)
 8004f92:	659a      	str	r2, [r3, #88]	; 0x58
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	4a0c      	ldr	r2, [pc, #48]	; (8004fc8 <prvInitialiseNewTask+0x144>)
 8004f98:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	4a0b      	ldr	r2, [pc, #44]	; (8004fcc <prvInitialiseNewTask+0x148>)
 8004f9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	68f9      	ldr	r1, [r7, #12]
 8004fa4:	69b8      	ldr	r0, [r7, #24]
 8004fa6:	f001 f941 	bl	800622c <pxPortInitialiseStack>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fbc:	bf00      	nop
 8004fbe:	3720      	adds	r7, #32
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	080072b8 	.word	0x080072b8
 8004fc8:	080072d8 	.word	0x080072d8
 8004fcc:	08007298 	.word	0x08007298

08004fd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fd8:	f001 fa54 	bl	8006484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fdc:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <prvAddNewTaskToReadyList+0xc4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	4a2c      	ldr	r2, [pc, #176]	; (8005094 <prvAddNewTaskToReadyList+0xc4>)
 8004fe4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fe6:	4b2c      	ldr	r3, [pc, #176]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fee:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <prvAddNewTaskToReadyList+0xc4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d110      	bne.n	800501e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ffc:	f000 fc26 	bl	800584c <prvInitialiseTaskLists>
 8005000:	e00d      	b.n	800501e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005002:	4b26      	ldr	r3, [pc, #152]	; (800509c <prvAddNewTaskToReadyList+0xcc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800500a:	4b23      	ldr	r3, [pc, #140]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	429a      	cmp	r2, r3
 8005016:	d802      	bhi.n	800501e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005018:	4a1f      	ldr	r2, [pc, #124]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800501e:	4b20      	ldr	r3, [pc, #128]	; (80050a0 <prvAddNewTaskToReadyList+0xd0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3301      	adds	r3, #1
 8005024:	4a1e      	ldr	r2, [pc, #120]	; (80050a0 <prvAddNewTaskToReadyList+0xd0>)
 8005026:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005028:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <prvAddNewTaskToReadyList+0xd0>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <prvAddNewTaskToReadyList+0xd4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d903      	bls.n	8005044 <prvAddNewTaskToReadyList+0x74>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	4a18      	ldr	r2, [pc, #96]	; (80050a4 <prvAddNewTaskToReadyList+0xd4>)
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4a15      	ldr	r2, [pc, #84]	; (80050a8 <prvAddNewTaskToReadyList+0xd8>)
 8005052:	441a      	add	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f7ff f8fd 	bl	800425a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005060:	f001 fa40 	bl	80064e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005064:	4b0d      	ldr	r3, [pc, #52]	; (800509c <prvAddNewTaskToReadyList+0xcc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00e      	beq.n	800508a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	429a      	cmp	r2, r3
 8005078:	d207      	bcs.n	800508a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <prvAddNewTaskToReadyList+0xdc>)
 800507c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000d20 	.word	0x20000d20
 8005098:	2000084c 	.word	0x2000084c
 800509c:	20000d2c 	.word	0x20000d2c
 80050a0:	20000d3c 	.word	0x20000d3c
 80050a4:	20000d28 	.word	0x20000d28
 80050a8:	20000850 	.word	0x20000850
 80050ac:	e000ed04 	.word	0xe000ed04

080050b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d017      	beq.n	80050f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050c2:	4b13      	ldr	r3, [pc, #76]	; (8005110 <vTaskDelay+0x60>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <vTaskDelay+0x30>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	60bb      	str	r3, [r7, #8]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050e0:	f000 f88a 	bl	80051f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050e4:	2100      	movs	r1, #0
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fcfe 	bl	8005ae8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050ec:	f000 f892 	bl	8005214 <xTaskResumeAll>
 80050f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d107      	bne.n	8005108 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80050f8:	4b06      	ldr	r3, [pc, #24]	; (8005114 <vTaskDelay+0x64>)
 80050fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20000d48 	.word	0x20000d48
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08a      	sub	sp, #40	; 0x28
 800511c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005126:	463a      	mov	r2, r7
 8005128:	1d39      	adds	r1, r7, #4
 800512a:	f107 0308 	add.w	r3, r7, #8
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff f832 	bl	8004198 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005134:	6839      	ldr	r1, [r7, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	9202      	str	r2, [sp, #8]
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	2300      	movs	r3, #0
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	2300      	movs	r3, #0
 8005144:	460a      	mov	r2, r1
 8005146:	4924      	ldr	r1, [pc, #144]	; (80051d8 <vTaskStartScheduler+0xc0>)
 8005148:	4824      	ldr	r0, [pc, #144]	; (80051dc <vTaskStartScheduler+0xc4>)
 800514a:	f7ff fdf9 	bl	8004d40 <xTaskCreateStatic>
 800514e:	4603      	mov	r3, r0
 8005150:	4a23      	ldr	r2, [pc, #140]	; (80051e0 <vTaskStartScheduler+0xc8>)
 8005152:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005154:	4b22      	ldr	r3, [pc, #136]	; (80051e0 <vTaskStartScheduler+0xc8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800515c:	2301      	movs	r3, #1
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	e001      	b.n	8005166 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d102      	bne.n	8005172 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800516c:	f000 fd10 	bl	8005b90 <xTimerCreateTimerTask>
 8005170:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d11b      	bne.n	80051b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	613b      	str	r3, [r7, #16]
}
 800518a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800518c:	4b15      	ldr	r3, [pc, #84]	; (80051e4 <vTaskStartScheduler+0xcc>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3354      	adds	r3, #84	; 0x54
 8005192:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <vTaskStartScheduler+0xd0>)
 8005194:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005196:	4b15      	ldr	r3, [pc, #84]	; (80051ec <vTaskStartScheduler+0xd4>)
 8005198:	f04f 32ff 	mov.w	r2, #4294967295
 800519c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800519e:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <vTaskStartScheduler+0xd8>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051a4:	4b13      	ldr	r3, [pc, #76]	; (80051f4 <vTaskStartScheduler+0xdc>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051aa:	f001 f8c9 	bl	8006340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051ae:	e00e      	b.n	80051ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b6:	d10a      	bne.n	80051ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	60fb      	str	r3, [r7, #12]
}
 80051ca:	bf00      	nop
 80051cc:	e7fe      	b.n	80051cc <vTaskStartScheduler+0xb4>
}
 80051ce:	bf00      	nop
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	08007140 	.word	0x08007140
 80051dc:	0800581d 	.word	0x0800581d
 80051e0:	20000d44 	.word	0x20000d44
 80051e4:	2000084c 	.word	0x2000084c
 80051e8:	2000004c 	.word	0x2000004c
 80051ec:	20000d40 	.word	0x20000d40
 80051f0:	20000d2c 	.word	0x20000d2c
 80051f4:	20000d24 	.word	0x20000d24

080051f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051fc:	4b04      	ldr	r3, [pc, #16]	; (8005210 <vTaskSuspendAll+0x18>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	4a03      	ldr	r2, [pc, #12]	; (8005210 <vTaskSuspendAll+0x18>)
 8005204:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005206:	bf00      	nop
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	20000d48 	.word	0x20000d48

08005214 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800521e:	2300      	movs	r3, #0
 8005220:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005222:	4b42      	ldr	r3, [pc, #264]	; (800532c <xTaskResumeAll+0x118>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <xTaskResumeAll+0x2c>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	603b      	str	r3, [r7, #0]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005240:	f001 f920 	bl	8006484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005244:	4b39      	ldr	r3, [pc, #228]	; (800532c <xTaskResumeAll+0x118>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3b01      	subs	r3, #1
 800524a:	4a38      	ldr	r2, [pc, #224]	; (800532c <xTaskResumeAll+0x118>)
 800524c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800524e:	4b37      	ldr	r3, [pc, #220]	; (800532c <xTaskResumeAll+0x118>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d162      	bne.n	800531c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005256:	4b36      	ldr	r3, [pc, #216]	; (8005330 <xTaskResumeAll+0x11c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d05e      	beq.n	800531c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800525e:	e02f      	b.n	80052c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005260:	4b34      	ldr	r3, [pc, #208]	; (8005334 <xTaskResumeAll+0x120>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3318      	adds	r3, #24
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff f851 	bl	8004314 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3304      	adds	r3, #4
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff f84c 	bl	8004314 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	4b2d      	ldr	r3, [pc, #180]	; (8005338 <xTaskResumeAll+0x124>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d903      	bls.n	8005290 <xTaskResumeAll+0x7c>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	4a2a      	ldr	r2, [pc, #168]	; (8005338 <xTaskResumeAll+0x124>)
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	4613      	mov	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4a27      	ldr	r2, [pc, #156]	; (800533c <xTaskResumeAll+0x128>)
 800529e:	441a      	add	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3304      	adds	r3, #4
 80052a4:	4619      	mov	r1, r3
 80052a6:	4610      	mov	r0, r2
 80052a8:	f7fe ffd7 	bl	800425a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b0:	4b23      	ldr	r3, [pc, #140]	; (8005340 <xTaskResumeAll+0x12c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d302      	bcc.n	80052c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80052ba:	4b22      	ldr	r3, [pc, #136]	; (8005344 <xTaskResumeAll+0x130>)
 80052bc:	2201      	movs	r2, #1
 80052be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052c0:	4b1c      	ldr	r3, [pc, #112]	; (8005334 <xTaskResumeAll+0x120>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1cb      	bne.n	8005260 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052ce:	f000 fb5f 	bl	8005990 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052d2:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <xTaskResumeAll+0x134>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d010      	beq.n	8005300 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052de:	f000 f847 	bl	8005370 <xTaskIncrementTick>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80052e8:	4b16      	ldr	r3, [pc, #88]	; (8005344 <xTaskResumeAll+0x130>)
 80052ea:	2201      	movs	r2, #1
 80052ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f1      	bne.n	80052de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80052fa:	4b13      	ldr	r3, [pc, #76]	; (8005348 <xTaskResumeAll+0x134>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005300:	4b10      	ldr	r3, [pc, #64]	; (8005344 <xTaskResumeAll+0x130>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d009      	beq.n	800531c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005308:	2301      	movs	r3, #1
 800530a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800530c:	4b0f      	ldr	r3, [pc, #60]	; (800534c <xTaskResumeAll+0x138>)
 800530e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800531c:	f001 f8e2 	bl	80064e4 <vPortExitCritical>

	return xAlreadyYielded;
 8005320:	68bb      	ldr	r3, [r7, #8]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000d48 	.word	0x20000d48
 8005330:	20000d20 	.word	0x20000d20
 8005334:	20000ce0 	.word	0x20000ce0
 8005338:	20000d28 	.word	0x20000d28
 800533c:	20000850 	.word	0x20000850
 8005340:	2000084c 	.word	0x2000084c
 8005344:	20000d34 	.word	0x20000d34
 8005348:	20000d30 	.word	0x20000d30
 800534c:	e000ed04 	.word	0xe000ed04

08005350 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005356:	4b05      	ldr	r3, [pc, #20]	; (800536c <xTaskGetTickCount+0x1c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800535c:	687b      	ldr	r3, [r7, #4]
}
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	20000d24 	.word	0x20000d24

08005370 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800537a:	4b4f      	ldr	r3, [pc, #316]	; (80054b8 <xTaskIncrementTick+0x148>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f040 808f 	bne.w	80054a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005384:	4b4d      	ldr	r3, [pc, #308]	; (80054bc <xTaskIncrementTick+0x14c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3301      	adds	r3, #1
 800538a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800538c:	4a4b      	ldr	r2, [pc, #300]	; (80054bc <xTaskIncrementTick+0x14c>)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d120      	bne.n	80053da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005398:	4b49      	ldr	r3, [pc, #292]	; (80054c0 <xTaskIncrementTick+0x150>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	603b      	str	r3, [r7, #0]
}
 80053b4:	bf00      	nop
 80053b6:	e7fe      	b.n	80053b6 <xTaskIncrementTick+0x46>
 80053b8:	4b41      	ldr	r3, [pc, #260]	; (80054c0 <xTaskIncrementTick+0x150>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	4b41      	ldr	r3, [pc, #260]	; (80054c4 <xTaskIncrementTick+0x154>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a3f      	ldr	r2, [pc, #252]	; (80054c0 <xTaskIncrementTick+0x150>)
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	4a3f      	ldr	r2, [pc, #252]	; (80054c4 <xTaskIncrementTick+0x154>)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	4b3e      	ldr	r3, [pc, #248]	; (80054c8 <xTaskIncrementTick+0x158>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3301      	adds	r3, #1
 80053d2:	4a3d      	ldr	r2, [pc, #244]	; (80054c8 <xTaskIncrementTick+0x158>)
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	f000 fadb 	bl	8005990 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053da:	4b3c      	ldr	r3, [pc, #240]	; (80054cc <xTaskIncrementTick+0x15c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d349      	bcc.n	8005478 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053e4:	4b36      	ldr	r3, [pc, #216]	; (80054c0 <xTaskIncrementTick+0x150>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ee:	4b37      	ldr	r3, [pc, #220]	; (80054cc <xTaskIncrementTick+0x15c>)
 80053f0:	f04f 32ff 	mov.w	r2, #4294967295
 80053f4:	601a      	str	r2, [r3, #0]
					break;
 80053f6:	e03f      	b.n	8005478 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f8:	4b31      	ldr	r3, [pc, #196]	; (80054c0 <xTaskIncrementTick+0x150>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	429a      	cmp	r2, r3
 800540e:	d203      	bcs.n	8005418 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005410:	4a2e      	ldr	r2, [pc, #184]	; (80054cc <xTaskIncrementTick+0x15c>)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005416:	e02f      	b.n	8005478 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	3304      	adds	r3, #4
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe ff79 	bl	8004314 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	3318      	adds	r3, #24
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe ff70 	bl	8004314 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <xTaskIncrementTick+0x160>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d903      	bls.n	8005448 <xTaskIncrementTick+0xd8>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <xTaskIncrementTick+0x160>)
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <xTaskIncrementTick+0x164>)
 8005456:	441a      	add	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f7fe fefb 	bl	800425a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005468:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <xTaskIncrementTick+0x168>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	429a      	cmp	r2, r3
 8005470:	d3b8      	bcc.n	80053e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005472:	2301      	movs	r3, #1
 8005474:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005476:	e7b5      	b.n	80053e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005478:	4b17      	ldr	r3, [pc, #92]	; (80054d8 <xTaskIncrementTick+0x168>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547e:	4915      	ldr	r1, [pc, #84]	; (80054d4 <xTaskIncrementTick+0x164>)
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d901      	bls.n	8005494 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005490:	2301      	movs	r3, #1
 8005492:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005494:	4b11      	ldr	r3, [pc, #68]	; (80054dc <xTaskIncrementTick+0x16c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800549c:	2301      	movs	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e004      	b.n	80054ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80054a2:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <xTaskIncrementTick+0x170>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3301      	adds	r3, #1
 80054a8:	4a0d      	ldr	r2, [pc, #52]	; (80054e0 <xTaskIncrementTick+0x170>)
 80054aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80054ac:	697b      	ldr	r3, [r7, #20]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000d48 	.word	0x20000d48
 80054bc:	20000d24 	.word	0x20000d24
 80054c0:	20000cd8 	.word	0x20000cd8
 80054c4:	20000cdc 	.word	0x20000cdc
 80054c8:	20000d38 	.word	0x20000d38
 80054cc:	20000d40 	.word	0x20000d40
 80054d0:	20000d28 	.word	0x20000d28
 80054d4:	20000850 	.word	0x20000850
 80054d8:	2000084c 	.word	0x2000084c
 80054dc:	20000d34 	.word	0x20000d34
 80054e0:	20000d30 	.word	0x20000d30

080054e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054ea:	4b2a      	ldr	r3, [pc, #168]	; (8005594 <vTaskSwitchContext+0xb0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054f2:	4b29      	ldr	r3, [pc, #164]	; (8005598 <vTaskSwitchContext+0xb4>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054f8:	e046      	b.n	8005588 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80054fa:	4b27      	ldr	r3, [pc, #156]	; (8005598 <vTaskSwitchContext+0xb4>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005500:	4b26      	ldr	r3, [pc, #152]	; (800559c <vTaskSwitchContext+0xb8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e010      	b.n	800552a <vTaskSwitchContext+0x46>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <vTaskSwitchContext+0x40>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	607b      	str	r3, [r7, #4]
}
 8005520:	bf00      	nop
 8005522:	e7fe      	b.n	8005522 <vTaskSwitchContext+0x3e>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3b01      	subs	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	491d      	ldr	r1, [pc, #116]	; (80055a0 <vTaskSwitchContext+0xbc>)
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4613      	mov	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0e4      	beq.n	8005508 <vTaskSwitchContext+0x24>
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4a15      	ldr	r2, [pc, #84]	; (80055a0 <vTaskSwitchContext+0xbc>)
 800554a:	4413      	add	r3, r2
 800554c:	60bb      	str	r3, [r7, #8]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	605a      	str	r2, [r3, #4]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	3308      	adds	r3, #8
 8005560:	429a      	cmp	r2, r3
 8005562:	d104      	bne.n	800556e <vTaskSwitchContext+0x8a>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	605a      	str	r2, [r3, #4]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	4a0b      	ldr	r2, [pc, #44]	; (80055a4 <vTaskSwitchContext+0xc0>)
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	4a08      	ldr	r2, [pc, #32]	; (800559c <vTaskSwitchContext+0xb8>)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800557e:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <vTaskSwitchContext+0xc0>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3354      	adds	r3, #84	; 0x54
 8005584:	4a08      	ldr	r2, [pc, #32]	; (80055a8 <vTaskSwitchContext+0xc4>)
 8005586:	6013      	str	r3, [r2, #0]
}
 8005588:	bf00      	nop
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	20000d48 	.word	0x20000d48
 8005598:	20000d34 	.word	0x20000d34
 800559c:	20000d28 	.word	0x20000d28
 80055a0:	20000850 	.word	0x20000850
 80055a4:	2000084c 	.word	0x2000084c
 80055a8:	2000004c 	.word	0x2000004c

080055ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	60fb      	str	r3, [r7, #12]
}
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055d2:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <vTaskPlaceOnEventList+0x44>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3318      	adds	r3, #24
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fe fe61 	bl	80042a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055e0:	2101      	movs	r1, #1
 80055e2:	6838      	ldr	r0, [r7, #0]
 80055e4:	f000 fa80 	bl	8005ae8 <prvAddCurrentTaskToDelayedList>
}
 80055e8:	bf00      	nop
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	2000084c 	.word	0x2000084c

080055f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10a      	bne.n	800561c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	617b      	str	r3, [r7, #20]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800561c:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <vTaskPlaceOnEventListRestricted+0x54>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3318      	adds	r3, #24
 8005622:	4619      	mov	r1, r3
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f7fe fe18 	bl	800425a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005630:	f04f 33ff 	mov.w	r3, #4294967295
 8005634:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	68b8      	ldr	r0, [r7, #8]
 800563a:	f000 fa55 	bl	8005ae8 <prvAddCurrentTaskToDelayedList>
	}
 800563e:	bf00      	nop
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	2000084c 	.word	0x2000084c

0800564c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	60fb      	str	r3, [r7, #12]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	3318      	adds	r3, #24
 800567c:	4618      	mov	r0, r3
 800567e:	f7fe fe49 	bl	8004314 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005682:	4b1e      	ldr	r3, [pc, #120]	; (80056fc <xTaskRemoveFromEventList+0xb0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d11d      	bne.n	80056c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	3304      	adds	r3, #4
 800568e:	4618      	mov	r0, r3
 8005690:	f7fe fe40 	bl	8004314 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005698:	4b19      	ldr	r3, [pc, #100]	; (8005700 <xTaskRemoveFromEventList+0xb4>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d903      	bls.n	80056a8 <xTaskRemoveFromEventList+0x5c>
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	4a16      	ldr	r2, [pc, #88]	; (8005700 <xTaskRemoveFromEventList+0xb4>)
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4a13      	ldr	r2, [pc, #76]	; (8005704 <xTaskRemoveFromEventList+0xb8>)
 80056b6:	441a      	add	r2, r3
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	3304      	adds	r3, #4
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f7fe fdcb 	bl	800425a <vListInsertEnd>
 80056c4:	e005      	b.n	80056d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	3318      	adds	r3, #24
 80056ca:	4619      	mov	r1, r3
 80056cc:	480e      	ldr	r0, [pc, #56]	; (8005708 <xTaskRemoveFromEventList+0xbc>)
 80056ce:	f7fe fdc4 	bl	800425a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d6:	4b0d      	ldr	r3, [pc, #52]	; (800570c <xTaskRemoveFromEventList+0xc0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	429a      	cmp	r2, r3
 80056de:	d905      	bls.n	80056ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056e0:	2301      	movs	r3, #1
 80056e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056e4:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <xTaskRemoveFromEventList+0xc4>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	e001      	b.n	80056f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056f0:	697b      	ldr	r3, [r7, #20]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000d48 	.word	0x20000d48
 8005700:	20000d28 	.word	0x20000d28
 8005704:	20000850 	.word	0x20000850
 8005708:	20000ce0 	.word	0x20000ce0
 800570c:	2000084c 	.word	0x2000084c
 8005710:	20000d34 	.word	0x20000d34

08005714 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800571c:	4b06      	ldr	r3, [pc, #24]	; (8005738 <vTaskInternalSetTimeOutState+0x24>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <vTaskInternalSetTimeOutState+0x28>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	605a      	str	r2, [r3, #4]
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	20000d38 	.word	0x20000d38
 800573c:	20000d24 	.word	0x20000d24

08005740 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	613b      	str	r3, [r7, #16]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	60fb      	str	r3, [r7, #12]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005782:	f000 fe7f 	bl	8006484 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005786:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <xTaskCheckForTimeOut+0xbc>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d102      	bne.n	80057a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61fb      	str	r3, [r7, #28]
 80057a4:	e023      	b.n	80057ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4b15      	ldr	r3, [pc, #84]	; (8005800 <xTaskCheckForTimeOut+0xc0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d007      	beq.n	80057c2 <xTaskCheckForTimeOut+0x82>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d302      	bcc.n	80057c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057bc:	2301      	movs	r3, #1
 80057be:	61fb      	str	r3, [r7, #28]
 80057c0:	e015      	b.n	80057ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d20b      	bcs.n	80057e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	1ad2      	subs	r2, r2, r3
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff ff9b 	bl	8005714 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057de:	2300      	movs	r3, #0
 80057e0:	61fb      	str	r3, [r7, #28]
 80057e2:	e004      	b.n	80057ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057ea:	2301      	movs	r3, #1
 80057ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057ee:	f000 fe79 	bl	80064e4 <vPortExitCritical>

	return xReturn;
 80057f2:	69fb      	ldr	r3, [r7, #28]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3720      	adds	r7, #32
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20000d24 	.word	0x20000d24
 8005800:	20000d38 	.word	0x20000d38

08005804 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005808:	4b03      	ldr	r3, [pc, #12]	; (8005818 <vTaskMissedYield+0x14>)
 800580a:	2201      	movs	r2, #1
 800580c:	601a      	str	r2, [r3, #0]
}
 800580e:	bf00      	nop
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	20000d34 	.word	0x20000d34

0800581c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005824:	f000 f852 	bl	80058cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005828:	4b06      	ldr	r3, [pc, #24]	; (8005844 <prvIdleTask+0x28>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d9f9      	bls.n	8005824 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005830:	4b05      	ldr	r3, [pc, #20]	; (8005848 <prvIdleTask+0x2c>)
 8005832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005840:	e7f0      	b.n	8005824 <prvIdleTask+0x8>
 8005842:	bf00      	nop
 8005844:	20000850 	.word	0x20000850
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005852:	2300      	movs	r3, #0
 8005854:	607b      	str	r3, [r7, #4]
 8005856:	e00c      	b.n	8005872 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4a12      	ldr	r2, [pc, #72]	; (80058ac <prvInitialiseTaskLists+0x60>)
 8005864:	4413      	add	r3, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f7fe fcca 	bl	8004200 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3301      	adds	r3, #1
 8005870:	607b      	str	r3, [r7, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b37      	cmp	r3, #55	; 0x37
 8005876:	d9ef      	bls.n	8005858 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005878:	480d      	ldr	r0, [pc, #52]	; (80058b0 <prvInitialiseTaskLists+0x64>)
 800587a:	f7fe fcc1 	bl	8004200 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800587e:	480d      	ldr	r0, [pc, #52]	; (80058b4 <prvInitialiseTaskLists+0x68>)
 8005880:	f7fe fcbe 	bl	8004200 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005884:	480c      	ldr	r0, [pc, #48]	; (80058b8 <prvInitialiseTaskLists+0x6c>)
 8005886:	f7fe fcbb 	bl	8004200 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800588a:	480c      	ldr	r0, [pc, #48]	; (80058bc <prvInitialiseTaskLists+0x70>)
 800588c:	f7fe fcb8 	bl	8004200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005890:	480b      	ldr	r0, [pc, #44]	; (80058c0 <prvInitialiseTaskLists+0x74>)
 8005892:	f7fe fcb5 	bl	8004200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005896:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <prvInitialiseTaskLists+0x78>)
 8005898:	4a05      	ldr	r2, [pc, #20]	; (80058b0 <prvInitialiseTaskLists+0x64>)
 800589a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800589c:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <prvInitialiseTaskLists+0x7c>)
 800589e:	4a05      	ldr	r2, [pc, #20]	; (80058b4 <prvInitialiseTaskLists+0x68>)
 80058a0:	601a      	str	r2, [r3, #0]
}
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20000850 	.word	0x20000850
 80058b0:	20000cb0 	.word	0x20000cb0
 80058b4:	20000cc4 	.word	0x20000cc4
 80058b8:	20000ce0 	.word	0x20000ce0
 80058bc:	20000cf4 	.word	0x20000cf4
 80058c0:	20000d0c 	.word	0x20000d0c
 80058c4:	20000cd8 	.word	0x20000cd8
 80058c8:	20000cdc 	.word	0x20000cdc

080058cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058d2:	e019      	b.n	8005908 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058d4:	f000 fdd6 	bl	8006484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d8:	4b10      	ldr	r3, [pc, #64]	; (800591c <prvCheckTasksWaitingTermination+0x50>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3304      	adds	r3, #4
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fe fd15 	bl	8004314 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058ea:	4b0d      	ldr	r3, [pc, #52]	; (8005920 <prvCheckTasksWaitingTermination+0x54>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	4a0b      	ldr	r2, [pc, #44]	; (8005920 <prvCheckTasksWaitingTermination+0x54>)
 80058f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058f4:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <prvCheckTasksWaitingTermination+0x58>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	4a0a      	ldr	r2, [pc, #40]	; (8005924 <prvCheckTasksWaitingTermination+0x58>)
 80058fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058fe:	f000 fdf1 	bl	80064e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f810 	bl	8005928 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005908:	4b06      	ldr	r3, [pc, #24]	; (8005924 <prvCheckTasksWaitingTermination+0x58>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e1      	bne.n	80058d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000cf4 	.word	0x20000cf4
 8005920:	20000d20 	.word	0x20000d20
 8005924:	20000d08 	.word	0x20000d08

08005928 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3354      	adds	r3, #84	; 0x54
 8005934:	4618      	mov	r0, r3
 8005936:	f001 f901 	bl	8006b3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005940:	2b00      	cmp	r3, #0
 8005942:	d108      	bne.n	8005956 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	4618      	mov	r0, r3
 800594a:	f000 ff89 	bl	8006860 <vPortFree>
				vPortFree( pxTCB );
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 ff86 	bl	8006860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005954:	e018      	b.n	8005988 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800595c:	2b01      	cmp	r3, #1
 800595e:	d103      	bne.n	8005968 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 ff7d 	bl	8006860 <vPortFree>
	}
 8005966:	e00f      	b.n	8005988 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800596e:	2b02      	cmp	r3, #2
 8005970:	d00a      	beq.n	8005988 <prvDeleteTCB+0x60>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	60fb      	str	r3, [r7, #12]
}
 8005984:	bf00      	nop
 8005986:	e7fe      	b.n	8005986 <prvDeleteTCB+0x5e>
	}
 8005988:	bf00      	nop
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005996:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <prvResetNextTaskUnblockTime+0x38>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d104      	bne.n	80059aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <prvResetNextTaskUnblockTime+0x3c>)
 80059a2:	f04f 32ff 	mov.w	r2, #4294967295
 80059a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059a8:	e008      	b.n	80059bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059aa:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <prvResetNextTaskUnblockTime+0x38>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	4a04      	ldr	r2, [pc, #16]	; (80059cc <prvResetNextTaskUnblockTime+0x3c>)
 80059ba:	6013      	str	r3, [r2, #0]
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	20000cd8 	.word	0x20000cd8
 80059cc:	20000d40 	.word	0x20000d40

080059d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059d6:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <xTaskGetSchedulerState+0x34>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d102      	bne.n	80059e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059de:	2301      	movs	r3, #1
 80059e0:	607b      	str	r3, [r7, #4]
 80059e2:	e008      	b.n	80059f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059e4:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <xTaskGetSchedulerState+0x38>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059ec:	2302      	movs	r3, #2
 80059ee:	607b      	str	r3, [r7, #4]
 80059f0:	e001      	b.n	80059f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059f2:	2300      	movs	r3, #0
 80059f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059f6:	687b      	ldr	r3, [r7, #4]
	}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	20000d2c 	.word	0x20000d2c
 8005a08:	20000d48 	.word	0x20000d48

08005a0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d056      	beq.n	8005ad0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a22:	4b2e      	ldr	r3, [pc, #184]	; (8005adc <xTaskPriorityDisinherit+0xd0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d00a      	beq.n	8005a42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	60fb      	str	r3, [r7, #12]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	60bb      	str	r3, [r7, #8]
}
 8005a5c:	bf00      	nop
 8005a5e:	e7fe      	b.n	8005a5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a64:	1e5a      	subs	r2, r3, #1
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d02c      	beq.n	8005ad0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d128      	bne.n	8005ad0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	3304      	adds	r3, #4
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fc46 	bl	8004314 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa0:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <xTaskPriorityDisinherit+0xd4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d903      	bls.n	8005ab0 <xTaskPriorityDisinherit+0xa4>
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	4a0c      	ldr	r2, [pc, #48]	; (8005ae0 <xTaskPriorityDisinherit+0xd4>)
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4a09      	ldr	r2, [pc, #36]	; (8005ae4 <xTaskPriorityDisinherit+0xd8>)
 8005abe:	441a      	add	r2, r3
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	f7fe fbc7 	bl	800425a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005acc:	2301      	movs	r3, #1
 8005ace:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ad0:	697b      	ldr	r3, [r7, #20]
	}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	2000084c 	.word	0x2000084c
 8005ae0:	20000d28 	.word	0x20000d28
 8005ae4:	20000850 	.word	0x20000850

08005ae8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005af2:	4b21      	ldr	r3, [pc, #132]	; (8005b78 <prvAddCurrentTaskToDelayedList+0x90>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005af8:	4b20      	ldr	r3, [pc, #128]	; (8005b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3304      	adds	r3, #4
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe fc08 	bl	8004314 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0a:	d10a      	bne.n	8005b22 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b12:	4b1a      	ldr	r3, [pc, #104]	; (8005b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4819      	ldr	r0, [pc, #100]	; (8005b80 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b1c:	f7fe fb9d 	bl	800425a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b20:	e026      	b.n	8005b70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4413      	add	r3, r2
 8005b28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b2a:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d209      	bcs.n	8005b4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b3a:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3304      	adds	r3, #4
 8005b44:	4619      	mov	r1, r3
 8005b46:	4610      	mov	r0, r2
 8005b48:	f7fe fbab 	bl	80042a2 <vListInsert>
}
 8005b4c:	e010      	b.n	8005b70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b4e:	4b0e      	ldr	r3, [pc, #56]	; (8005b88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7fe fba1 	bl	80042a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b60:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d202      	bcs.n	8005b70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b6a:	4a08      	ldr	r2, [pc, #32]	; (8005b8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	6013      	str	r3, [r2, #0]
}
 8005b70:	bf00      	nop
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20000d24 	.word	0x20000d24
 8005b7c:	2000084c 	.word	0x2000084c
 8005b80:	20000d0c 	.word	0x20000d0c
 8005b84:	20000cdc 	.word	0x20000cdc
 8005b88:	20000cd8 	.word	0x20000cd8
 8005b8c:	20000d40 	.word	0x20000d40

08005b90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	; 0x28
 8005b94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b9a:	f000 fb07 	bl	80061ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b9e:	4b1c      	ldr	r3, [pc, #112]	; (8005c10 <xTimerCreateTimerTask+0x80>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d021      	beq.n	8005bea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005bae:	1d3a      	adds	r2, r7, #4
 8005bb0:	f107 0108 	add.w	r1, r7, #8
 8005bb4:	f107 030c 	add.w	r3, r7, #12
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe fb07 	bl	80041cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	9202      	str	r2, [sp, #8]
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	2302      	movs	r3, #2
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	460a      	mov	r2, r1
 8005bd0:	4910      	ldr	r1, [pc, #64]	; (8005c14 <xTimerCreateTimerTask+0x84>)
 8005bd2:	4811      	ldr	r0, [pc, #68]	; (8005c18 <xTimerCreateTimerTask+0x88>)
 8005bd4:	f7ff f8b4 	bl	8004d40 <xTaskCreateStatic>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	4a10      	ldr	r2, [pc, #64]	; (8005c1c <xTimerCreateTimerTask+0x8c>)
 8005bdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bde:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <xTimerCreateTimerTask+0x8c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005be6:	2301      	movs	r3, #1
 8005be8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	613b      	str	r3, [r7, #16]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c06:	697b      	ldr	r3, [r7, #20]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20000d7c 	.word	0x20000d7c
 8005c14:	08007148 	.word	0x08007148
 8005c18:	08005d55 	.word	0x08005d55
 8005c1c:	20000d80 	.word	0x20000d80

08005c20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08a      	sub	sp, #40	; 0x28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	623b      	str	r3, [r7, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	e7fe      	b.n	8005c4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c4e:	4b1a      	ldr	r3, [pc, #104]	; (8005cb8 <xTimerGenericCommand+0x98>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d02a      	beq.n	8005cac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b05      	cmp	r3, #5
 8005c66:	dc18      	bgt.n	8005c9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c68:	f7ff feb2 	bl	80059d0 <xTaskGetSchedulerState>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d109      	bne.n	8005c86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c72:	4b11      	ldr	r3, [pc, #68]	; (8005cb8 <xTimerGenericCommand+0x98>)
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	f107 0110 	add.w	r1, r7, #16
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c7e:	f7fe fc77 	bl	8004570 <xQueueGenericSend>
 8005c82:	6278      	str	r0, [r7, #36]	; 0x24
 8005c84:	e012      	b.n	8005cac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c86:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <xTimerGenericCommand+0x98>)
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	f107 0110 	add.w	r1, r7, #16
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2200      	movs	r2, #0
 8005c92:	f7fe fc6d 	bl	8004570 <xQueueGenericSend>
 8005c96:	6278      	str	r0, [r7, #36]	; 0x24
 8005c98:	e008      	b.n	8005cac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c9a:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <xTimerGenericCommand+0x98>)
 8005c9c:	6818      	ldr	r0, [r3, #0]
 8005c9e:	f107 0110 	add.w	r1, r7, #16
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	f7fe fd61 	bl	800476c <xQueueGenericSendFromISR>
 8005caa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3728      	adds	r7, #40	; 0x28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000d7c 	.word	0x20000d7c

08005cbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af02      	add	r7, sp, #8
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc6:	4b22      	ldr	r3, [pc, #136]	; (8005d50 <prvProcessExpiredTimer+0x94>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fe fb1d 	bl	8004314 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d022      	beq.n	8005d2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	18d1      	adds	r1, r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	6978      	ldr	r0, [r7, #20]
 8005cf6:	f000 f8d1 	bl	8005e9c <prvInsertTimerInActiveList>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01f      	beq.n	8005d40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d00:	2300      	movs	r3, #0
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	2300      	movs	r3, #0
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	2100      	movs	r1, #0
 8005d0a:	6978      	ldr	r0, [r7, #20]
 8005d0c:	f7ff ff88 	bl	8005c20 <xTimerGenericCommand>
 8005d10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d113      	bne.n	8005d40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	60fb      	str	r3, [r7, #12]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d34:	f023 0301 	bic.w	r3, r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	6978      	ldr	r0, [r7, #20]
 8005d46:	4798      	blx	r3
}
 8005d48:	bf00      	nop
 8005d4a:	3718      	adds	r7, #24
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000d74 	.word	0x20000d74

08005d54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d5c:	f107 0308 	add.w	r3, r7, #8
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 f857 	bl	8005e14 <prvGetNextExpireTime>
 8005d66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f803 	bl	8005d78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d72:	f000 f8d5 	bl	8005f20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d76:	e7f1      	b.n	8005d5c <prvTimerTask+0x8>

08005d78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d82:	f7ff fa39 	bl	80051f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d86:	f107 0308 	add.w	r3, r7, #8
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 f866 	bl	8005e5c <prvSampleTimeNow>
 8005d90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d130      	bne.n	8005dfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <prvProcessTimerOrBlockTask+0x3c>
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d806      	bhi.n	8005db4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005da6:	f7ff fa35 	bl	8005214 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005daa:	68f9      	ldr	r1, [r7, #12]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff ff85 	bl	8005cbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005db2:	e024      	b.n	8005dfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d008      	beq.n	8005dcc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005dba:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <prvProcessTimerOrBlockTask+0x90>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <prvProcessTimerOrBlockTask+0x50>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <prvProcessTimerOrBlockTask+0x52>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005dcc:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <prvProcessTimerOrBlockTask+0x94>)
 8005dce:	6818      	ldr	r0, [r3, #0]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	f7fe ff7d 	bl	8004cd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005dde:	f7ff fa19 	bl	8005214 <xTaskResumeAll>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005de8:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <prvProcessTimerOrBlockTask+0x98>)
 8005dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	f3bf 8f6f 	isb	sy
}
 8005df8:	e001      	b.n	8005dfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005dfa:	f7ff fa0b 	bl	8005214 <xTaskResumeAll>
}
 8005dfe:	bf00      	nop
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000d78 	.word	0x20000d78
 8005e0c:	20000d7c 	.word	0x20000d7c
 8005e10:	e000ed04 	.word	0xe000ed04

08005e14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e1c:	4b0e      	ldr	r3, [pc, #56]	; (8005e58 <prvGetNextExpireTime+0x44>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <prvGetNextExpireTime+0x16>
 8005e26:	2201      	movs	r2, #1
 8005e28:	e000      	b.n	8005e2c <prvGetNextExpireTime+0x18>
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d105      	bne.n	8005e44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e38:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <prvGetNextExpireTime+0x44>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	e001      	b.n	8005e48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e48:	68fb      	ldr	r3, [r7, #12]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	20000d74 	.word	0x20000d74

08005e5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e64:	f7ff fa74 	bl	8005350 <xTaskGetTickCount>
 8005e68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e6a:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <prvSampleTimeNow+0x3c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d205      	bcs.n	8005e80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e74:	f000 f936 	bl	80060e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	e002      	b.n	8005e86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e86:	4a04      	ldr	r2, [pc, #16]	; (8005e98 <prvSampleTimeNow+0x3c>)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000d84 	.word	0x20000d84

08005e9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d812      	bhi.n	8005ee8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	1ad2      	subs	r2, r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d302      	bcc.n	8005ed6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	e01b      	b.n	8005f0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ed6:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <prvInsertTimerInActiveList+0x7c>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3304      	adds	r3, #4
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	f7fe f9de 	bl	80042a2 <vListInsert>
 8005ee6:	e012      	b.n	8005f0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d206      	bcs.n	8005efe <prvInsertTimerInActiveList+0x62>
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d302      	bcc.n	8005efe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	e007      	b.n	8005f0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005efe:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <prvInsertTimerInActiveList+0x80>)
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3304      	adds	r3, #4
 8005f06:	4619      	mov	r1, r3
 8005f08:	4610      	mov	r0, r2
 8005f0a:	f7fe f9ca 	bl	80042a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f0e:	697b      	ldr	r3, [r7, #20]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20000d78 	.word	0x20000d78
 8005f1c:	20000d74 	.word	0x20000d74

08005f20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08e      	sub	sp, #56	; 0x38
 8005f24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f26:	e0ca      	b.n	80060be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	da18      	bge.n	8005f60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f2e:	1d3b      	adds	r3, r7, #4
 8005f30:	3304      	adds	r3, #4
 8005f32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	61fb      	str	r3, [r7, #28]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f56:	6850      	ldr	r0, [r2, #4]
 8005f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f5a:	6892      	ldr	r2, [r2, #8]
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f2c0 80aa 	blt.w	80060bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	3304      	adds	r3, #4
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fe f9cb 	bl	8004314 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f7e:	463b      	mov	r3, r7
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff ff6b 	bl	8005e5c <prvSampleTimeNow>
 8005f86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b09      	cmp	r3, #9
 8005f8c:	f200 8097 	bhi.w	80060be <prvProcessReceivedCommands+0x19e>
 8005f90:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <prvProcessReceivedCommands+0x78>)
 8005f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f96:	bf00      	nop
 8005f98:	08005fc1 	.word	0x08005fc1
 8005f9c:	08005fc1 	.word	0x08005fc1
 8005fa0:	08005fc1 	.word	0x08005fc1
 8005fa4:	08006035 	.word	0x08006035
 8005fa8:	08006049 	.word	0x08006049
 8005fac:	08006093 	.word	0x08006093
 8005fb0:	08005fc1 	.word	0x08005fc1
 8005fb4:	08005fc1 	.word	0x08005fc1
 8005fb8:	08006035 	.word	0x08006035
 8005fbc:	08006049 	.word	0x08006049
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fc6:	f043 0301 	orr.w	r3, r3, #1
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	18d1      	adds	r1, r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fe0:	f7ff ff5c 	bl	8005e9c <prvInsertTimerInActiveList>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d069      	beq.n	80060be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d05e      	beq.n	80060be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	441a      	add	r2, r3
 8006008:	2300      	movs	r3, #0
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	2300      	movs	r3, #0
 800600e:	2100      	movs	r1, #0
 8006010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006012:	f7ff fe05 	bl	8005c20 <xTimerGenericCommand>
 8006016:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d14f      	bne.n	80060be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	61bb      	str	r3, [r7, #24]
}
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	b2da      	uxtb	r2, r3
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006046:	e03a      	b.n	80060be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800604e:	f043 0301 	orr.w	r3, r3, #1
 8006052:	b2da      	uxtb	r2, r3
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	617b      	str	r3, [r7, #20]
}
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	18d1      	adds	r1, r2, r3
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800608c:	f7ff ff06 	bl	8005e9c <prvInsertTimerInActiveList>
					break;
 8006090:	e015      	b.n	80060be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d103      	bne.n	80060a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80060a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060a2:	f000 fbdd 	bl	8006860 <vPortFree>
 80060a6:	e00a      	b.n	80060be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ae:	f023 0301 	bic.w	r3, r3, #1
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060ba:	e000      	b.n	80060be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80060bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060be:	4b08      	ldr	r3, [pc, #32]	; (80060e0 <prvProcessReceivedCommands+0x1c0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	1d39      	adds	r1, r7, #4
 80060c4:	2200      	movs	r2, #0
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe fbec 	bl	80048a4 <xQueueReceive>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f47f af2a 	bne.w	8005f28 <prvProcessReceivedCommands+0x8>
	}
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop
 80060d8:	3730      	adds	r7, #48	; 0x30
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000d7c 	.word	0x20000d7c

080060e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060ea:	e048      	b.n	800617e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060ec:	4b2d      	ldr	r3, [pc, #180]	; (80061a4 <prvSwitchTimerLists+0xc0>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f6:	4b2b      	ldr	r3, [pc, #172]	; (80061a4 <prvSwitchTimerLists+0xc0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3304      	adds	r3, #4
 8006104:	4618      	mov	r0, r3
 8006106:	f7fe f905 	bl	8004314 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d02e      	beq.n	800617e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4413      	add	r3, r2
 8006128:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	429a      	cmp	r2, r3
 8006130:	d90e      	bls.n	8006150 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800613e:	4b19      	ldr	r3, [pc, #100]	; (80061a4 <prvSwitchTimerLists+0xc0>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3304      	adds	r3, #4
 8006146:	4619      	mov	r1, r3
 8006148:	4610      	mov	r0, r2
 800614a:	f7fe f8aa 	bl	80042a2 <vListInsert>
 800614e:	e016      	b.n	800617e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006150:	2300      	movs	r3, #0
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	2300      	movs	r3, #0
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	2100      	movs	r1, #0
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7ff fd60 	bl	8005c20 <xTimerGenericCommand>
 8006160:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	603b      	str	r3, [r7, #0]
}
 800617a:	bf00      	nop
 800617c:	e7fe      	b.n	800617c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800617e:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <prvSwitchTimerLists+0xc0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1b1      	bne.n	80060ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006188:	4b06      	ldr	r3, [pc, #24]	; (80061a4 <prvSwitchTimerLists+0xc0>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800618e:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <prvSwitchTimerLists+0xc4>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a04      	ldr	r2, [pc, #16]	; (80061a4 <prvSwitchTimerLists+0xc0>)
 8006194:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006196:	4a04      	ldr	r2, [pc, #16]	; (80061a8 <prvSwitchTimerLists+0xc4>)
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	6013      	str	r3, [r2, #0]
}
 800619c:	bf00      	nop
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20000d74 	.word	0x20000d74
 80061a8:	20000d78 	.word	0x20000d78

080061ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061b2:	f000 f967 	bl	8006484 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061b6:	4b15      	ldr	r3, [pc, #84]	; (800620c <prvCheckForValidListAndQueue+0x60>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d120      	bne.n	8006200 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061be:	4814      	ldr	r0, [pc, #80]	; (8006210 <prvCheckForValidListAndQueue+0x64>)
 80061c0:	f7fe f81e 	bl	8004200 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061c4:	4813      	ldr	r0, [pc, #76]	; (8006214 <prvCheckForValidListAndQueue+0x68>)
 80061c6:	f7fe f81b 	bl	8004200 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061ca:	4b13      	ldr	r3, [pc, #76]	; (8006218 <prvCheckForValidListAndQueue+0x6c>)
 80061cc:	4a10      	ldr	r2, [pc, #64]	; (8006210 <prvCheckForValidListAndQueue+0x64>)
 80061ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061d0:	4b12      	ldr	r3, [pc, #72]	; (800621c <prvCheckForValidListAndQueue+0x70>)
 80061d2:	4a10      	ldr	r2, [pc, #64]	; (8006214 <prvCheckForValidListAndQueue+0x68>)
 80061d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061d6:	2300      	movs	r3, #0
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	4b11      	ldr	r3, [pc, #68]	; (8006220 <prvCheckForValidListAndQueue+0x74>)
 80061dc:	4a11      	ldr	r2, [pc, #68]	; (8006224 <prvCheckForValidListAndQueue+0x78>)
 80061de:	2110      	movs	r1, #16
 80061e0:	200a      	movs	r0, #10
 80061e2:	f7fe f929 	bl	8004438 <xQueueGenericCreateStatic>
 80061e6:	4603      	mov	r3, r0
 80061e8:	4a08      	ldr	r2, [pc, #32]	; (800620c <prvCheckForValidListAndQueue+0x60>)
 80061ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061ec:	4b07      	ldr	r3, [pc, #28]	; (800620c <prvCheckForValidListAndQueue+0x60>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061f4:	4b05      	ldr	r3, [pc, #20]	; (800620c <prvCheckForValidListAndQueue+0x60>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	490b      	ldr	r1, [pc, #44]	; (8006228 <prvCheckForValidListAndQueue+0x7c>)
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fe fd42 	bl	8004c84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006200:	f000 f970 	bl	80064e4 <vPortExitCritical>
}
 8006204:	bf00      	nop
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	20000d7c 	.word	0x20000d7c
 8006210:	20000d4c 	.word	0x20000d4c
 8006214:	20000d60 	.word	0x20000d60
 8006218:	20000d74 	.word	0x20000d74
 800621c:	20000d78 	.word	0x20000d78
 8006220:	20000e28 	.word	0x20000e28
 8006224:	20000d88 	.word	0x20000d88
 8006228:	08007150 	.word	0x08007150

0800622c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3b04      	subs	r3, #4
 800623c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3b04      	subs	r3, #4
 800624a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f023 0201 	bic.w	r2, r3, #1
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3b04      	subs	r3, #4
 800625a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800625c:	4a0c      	ldr	r2, [pc, #48]	; (8006290 <pxPortInitialiseStack+0x64>)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3b14      	subs	r3, #20
 8006266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3b04      	subs	r3, #4
 8006272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f06f 0202 	mvn.w	r2, #2
 800627a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3b20      	subs	r3, #32
 8006280:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006282:	68fb      	ldr	r3, [r7, #12]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	08006295 	.word	0x08006295

08006294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800629e:	4b12      	ldr	r3, [pc, #72]	; (80062e8 <prvTaskExitError+0x54>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d00a      	beq.n	80062be <prvTaskExitError+0x2a>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	60fb      	str	r3, [r7, #12]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <prvTaskExitError+0x28>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	60bb      	str	r3, [r7, #8]
}
 80062d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062d2:	bf00      	nop
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0fc      	beq.n	80062d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062da:	bf00      	nop
 80062dc:	bf00      	nop
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	20000048 	.word	0x20000048
 80062ec:	00000000 	.word	0x00000000

080062f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062f0:	4b07      	ldr	r3, [pc, #28]	; (8006310 <pxCurrentTCBConst2>)
 80062f2:	6819      	ldr	r1, [r3, #0]
 80062f4:	6808      	ldr	r0, [r1, #0]
 80062f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fa:	f380 8809 	msr	PSP, r0
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f04f 0000 	mov.w	r0, #0
 8006306:	f380 8811 	msr	BASEPRI, r0
 800630a:	4770      	bx	lr
 800630c:	f3af 8000 	nop.w

08006310 <pxCurrentTCBConst2>:
 8006310:	2000084c 	.word	0x2000084c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop

08006318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006318:	4808      	ldr	r0, [pc, #32]	; (800633c <prvPortStartFirstTask+0x24>)
 800631a:	6800      	ldr	r0, [r0, #0]
 800631c:	6800      	ldr	r0, [r0, #0]
 800631e:	f380 8808 	msr	MSP, r0
 8006322:	f04f 0000 	mov.w	r0, #0
 8006326:	f380 8814 	msr	CONTROL, r0
 800632a:	b662      	cpsie	i
 800632c:	b661      	cpsie	f
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	df00      	svc	0
 8006338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800633a:	bf00      	nop
 800633c:	e000ed08 	.word	0xe000ed08

08006340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006346:	4b46      	ldr	r3, [pc, #280]	; (8006460 <xPortStartScheduler+0x120>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a46      	ldr	r2, [pc, #280]	; (8006464 <xPortStartScheduler+0x124>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d10a      	bne.n	8006366 <xPortStartScheduler+0x26>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	613b      	str	r3, [r7, #16]
}
 8006362:	bf00      	nop
 8006364:	e7fe      	b.n	8006364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006366:	4b3e      	ldr	r3, [pc, #248]	; (8006460 <xPortStartScheduler+0x120>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a3f      	ldr	r2, [pc, #252]	; (8006468 <xPortStartScheduler+0x128>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d10a      	bne.n	8006386 <xPortStartScheduler+0x46>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	60fb      	str	r3, [r7, #12]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006386:	4b39      	ldr	r3, [pc, #228]	; (800646c <xPortStartScheduler+0x12c>)
 8006388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	22ff      	movs	r2, #255	; 0xff
 8006396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	4b31      	ldr	r3, [pc, #196]	; (8006470 <xPortStartScheduler+0x130>)
 80063ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063ae:	4b31      	ldr	r3, [pc, #196]	; (8006474 <xPortStartScheduler+0x134>)
 80063b0:	2207      	movs	r2, #7
 80063b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063b4:	e009      	b.n	80063ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80063b6:	4b2f      	ldr	r3, [pc, #188]	; (8006474 <xPortStartScheduler+0x134>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	4a2d      	ldr	r2, [pc, #180]	; (8006474 <xPortStartScheduler+0x134>)
 80063be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d2:	2b80      	cmp	r3, #128	; 0x80
 80063d4:	d0ef      	beq.n	80063b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063d6:	4b27      	ldr	r3, [pc, #156]	; (8006474 <xPortStartScheduler+0x134>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f1c3 0307 	rsb	r3, r3, #7
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d00a      	beq.n	80063f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	60bb      	str	r3, [r7, #8]
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063f8:	4b1e      	ldr	r3, [pc, #120]	; (8006474 <xPortStartScheduler+0x134>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	021b      	lsls	r3, r3, #8
 80063fe:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <xPortStartScheduler+0x134>)
 8006400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006402:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <xPortStartScheduler+0x134>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800640a:	4a1a      	ldr	r2, [pc, #104]	; (8006474 <xPortStartScheduler+0x134>)
 800640c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	b2da      	uxtb	r2, r3
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006416:	4b18      	ldr	r3, [pc, #96]	; (8006478 <xPortStartScheduler+0x138>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a17      	ldr	r2, [pc, #92]	; (8006478 <xPortStartScheduler+0x138>)
 800641c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006422:	4b15      	ldr	r3, [pc, #84]	; (8006478 <xPortStartScheduler+0x138>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a14      	ldr	r2, [pc, #80]	; (8006478 <xPortStartScheduler+0x138>)
 8006428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800642c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800642e:	f000 f8dd 	bl	80065ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006432:	4b12      	ldr	r3, [pc, #72]	; (800647c <xPortStartScheduler+0x13c>)
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006438:	f000 f8fc 	bl	8006634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800643c:	4b10      	ldr	r3, [pc, #64]	; (8006480 <xPortStartScheduler+0x140>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a0f      	ldr	r2, [pc, #60]	; (8006480 <xPortStartScheduler+0x140>)
 8006442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006448:	f7ff ff66 	bl	8006318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800644c:	f7ff f84a 	bl	80054e4 <vTaskSwitchContext>
	prvTaskExitError();
 8006450:	f7ff ff20 	bl	8006294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	e000ed00 	.word	0xe000ed00
 8006464:	410fc271 	.word	0x410fc271
 8006468:	410fc270 	.word	0x410fc270
 800646c:	e000e400 	.word	0xe000e400
 8006470:	20000e78 	.word	0x20000e78
 8006474:	20000e7c 	.word	0x20000e7c
 8006478:	e000ed20 	.word	0xe000ed20
 800647c:	20000048 	.word	0x20000048
 8006480:	e000ef34 	.word	0xe000ef34

08006484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	607b      	str	r3, [r7, #4]
}
 800649c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800649e:	4b0f      	ldr	r3, [pc, #60]	; (80064dc <vPortEnterCritical+0x58>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3301      	adds	r3, #1
 80064a4:	4a0d      	ldr	r2, [pc, #52]	; (80064dc <vPortEnterCritical+0x58>)
 80064a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064a8:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <vPortEnterCritical+0x58>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d10f      	bne.n	80064d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064b0:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <vPortEnterCritical+0x5c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	603b      	str	r3, [r7, #0]
}
 80064cc:	bf00      	nop
 80064ce:	e7fe      	b.n	80064ce <vPortEnterCritical+0x4a>
	}
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	20000048 	.word	0x20000048
 80064e0:	e000ed04 	.word	0xe000ed04

080064e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064ea:	4b12      	ldr	r3, [pc, #72]	; (8006534 <vPortExitCritical+0x50>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <vPortExitCritical+0x24>
	__asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	607b      	str	r3, [r7, #4]
}
 8006504:	bf00      	nop
 8006506:	e7fe      	b.n	8006506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006508:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <vPortExitCritical+0x50>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3b01      	subs	r3, #1
 800650e:	4a09      	ldr	r2, [pc, #36]	; (8006534 <vPortExitCritical+0x50>)
 8006510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006512:	4b08      	ldr	r3, [pc, #32]	; (8006534 <vPortExitCritical+0x50>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d105      	bne.n	8006526 <vPortExitCritical+0x42>
 800651a:	2300      	movs	r3, #0
 800651c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	f383 8811 	msr	BASEPRI, r3
}
 8006524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000048 	.word	0x20000048
	...

08006540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006540:	f3ef 8009 	mrs	r0, PSP
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <pxCurrentTCBConst>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	f01e 0f10 	tst.w	lr, #16
 8006550:	bf08      	it	eq
 8006552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655a:	6010      	str	r0, [r2, #0]
 800655c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006560:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006564:	f380 8811 	msr	BASEPRI, r0
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f7fe ffb8 	bl	80054e4 <vTaskSwitchContext>
 8006574:	f04f 0000 	mov.w	r0, #0
 8006578:	f380 8811 	msr	BASEPRI, r0
 800657c:	bc09      	pop	{r0, r3}
 800657e:	6819      	ldr	r1, [r3, #0]
 8006580:	6808      	ldr	r0, [r1, #0]
 8006582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006586:	f01e 0f10 	tst.w	lr, #16
 800658a:	bf08      	it	eq
 800658c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006590:	f380 8809 	msr	PSP, r0
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	f3af 8000 	nop.w

080065a0 <pxCurrentTCBConst>:
 80065a0:	2000084c 	.word	0x2000084c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop

080065a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	607b      	str	r3, [r7, #4]
}
 80065c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065c2:	f7fe fed5 	bl	8005370 <xTaskIncrementTick>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065cc:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <xPortSysTickHandler+0x40>)
 80065ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	2300      	movs	r3, #0
 80065d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	f383 8811 	msr	BASEPRI, r3
}
 80065de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065f0:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <vPortSetupTimerInterrupt+0x34>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065f6:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <vPortSetupTimerInterrupt+0x38>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065fc:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <vPortSetupTimerInterrupt+0x3c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a0a      	ldr	r2, [pc, #40]	; (800662c <vPortSetupTimerInterrupt+0x40>)
 8006602:	fba2 2303 	umull	r2, r3, r2, r3
 8006606:	099b      	lsrs	r3, r3, #6
 8006608:	4a09      	ldr	r2, [pc, #36]	; (8006630 <vPortSetupTimerInterrupt+0x44>)
 800660a:	3b01      	subs	r3, #1
 800660c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800660e:	4b04      	ldr	r3, [pc, #16]	; (8006620 <vPortSetupTimerInterrupt+0x34>)
 8006610:	2207      	movs	r2, #7
 8006612:	601a      	str	r2, [r3, #0]
}
 8006614:	bf00      	nop
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	e000e010 	.word	0xe000e010
 8006624:	e000e018 	.word	0xe000e018
 8006628:	20000000 	.word	0x20000000
 800662c:	10624dd3 	.word	0x10624dd3
 8006630:	e000e014 	.word	0xe000e014

08006634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006644 <vPortEnableVFP+0x10>
 8006638:	6801      	ldr	r1, [r0, #0]
 800663a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800663e:	6001      	str	r1, [r0, #0]
 8006640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006642:	bf00      	nop
 8006644:	e000ed88 	.word	0xe000ed88

08006648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800664e:	f3ef 8305 	mrs	r3, IPSR
 8006652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b0f      	cmp	r3, #15
 8006658:	d914      	bls.n	8006684 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800665a:	4a17      	ldr	r2, [pc, #92]	; (80066b8 <vPortValidateInterruptPriority+0x70>)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006664:	4b15      	ldr	r3, [pc, #84]	; (80066bc <vPortValidateInterruptPriority+0x74>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	7afa      	ldrb	r2, [r7, #11]
 800666a:	429a      	cmp	r2, r3
 800666c:	d20a      	bcs.n	8006684 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	607b      	str	r3, [r7, #4]
}
 8006680:	bf00      	nop
 8006682:	e7fe      	b.n	8006682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006684:	4b0e      	ldr	r3, [pc, #56]	; (80066c0 <vPortValidateInterruptPriority+0x78>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800668c:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <vPortValidateInterruptPriority+0x7c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	429a      	cmp	r2, r3
 8006692:	d90a      	bls.n	80066aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	603b      	str	r3, [r7, #0]
}
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <vPortValidateInterruptPriority+0x60>
	}
 80066aa:	bf00      	nop
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	e000e3f0 	.word	0xe000e3f0
 80066bc:	20000e78 	.word	0x20000e78
 80066c0:	e000ed0c 	.word	0xe000ed0c
 80066c4:	20000e7c 	.word	0x20000e7c

080066c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	; 0x28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066d4:	f7fe fd90 	bl	80051f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066d8:	4b5b      	ldr	r3, [pc, #364]	; (8006848 <pvPortMalloc+0x180>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066e0:	f000 f920 	bl	8006924 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066e4:	4b59      	ldr	r3, [pc, #356]	; (800684c <pvPortMalloc+0x184>)
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4013      	ands	r3, r2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 8093 	bne.w	8006818 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01d      	beq.n	8006734 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066f8:	2208      	movs	r2, #8
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4413      	add	r3, r2
 80066fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	2b00      	cmp	r3, #0
 8006708:	d014      	beq.n	8006734 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f023 0307 	bic.w	r3, r3, #7
 8006710:	3308      	adds	r3, #8
 8006712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <pvPortMalloc+0x6c>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	617b      	str	r3, [r7, #20]
}
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d06e      	beq.n	8006818 <pvPortMalloc+0x150>
 800673a:	4b45      	ldr	r3, [pc, #276]	; (8006850 <pvPortMalloc+0x188>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	429a      	cmp	r2, r3
 8006742:	d869      	bhi.n	8006818 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006744:	4b43      	ldr	r3, [pc, #268]	; (8006854 <pvPortMalloc+0x18c>)
 8006746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006748:	4b42      	ldr	r3, [pc, #264]	; (8006854 <pvPortMalloc+0x18c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800674e:	e004      	b.n	800675a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	429a      	cmp	r2, r3
 8006762:	d903      	bls.n	800676c <pvPortMalloc+0xa4>
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1f1      	bne.n	8006750 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800676c:	4b36      	ldr	r3, [pc, #216]	; (8006848 <pvPortMalloc+0x180>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006772:	429a      	cmp	r2, r3
 8006774:	d050      	beq.n	8006818 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2208      	movs	r2, #8
 800677c:	4413      	add	r3, r2
 800677e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	1ad2      	subs	r2, r2, r3
 8006790:	2308      	movs	r3, #8
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	429a      	cmp	r2, r3
 8006796:	d91f      	bls.n	80067d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4413      	add	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <pvPortMalloc+0xf8>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	613b      	str	r3, [r7, #16]
}
 80067bc:	bf00      	nop
 80067be:	e7fe      	b.n	80067be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	1ad2      	subs	r2, r2, r3
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067d2:	69b8      	ldr	r0, [r7, #24]
 80067d4:	f000 f908 	bl	80069e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067d8:	4b1d      	ldr	r3, [pc, #116]	; (8006850 <pvPortMalloc+0x188>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	4a1b      	ldr	r2, [pc, #108]	; (8006850 <pvPortMalloc+0x188>)
 80067e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067e6:	4b1a      	ldr	r3, [pc, #104]	; (8006850 <pvPortMalloc+0x188>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	4b1b      	ldr	r3, [pc, #108]	; (8006858 <pvPortMalloc+0x190>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d203      	bcs.n	80067fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067f2:	4b17      	ldr	r3, [pc, #92]	; (8006850 <pvPortMalloc+0x188>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a18      	ldr	r2, [pc, #96]	; (8006858 <pvPortMalloc+0x190>)
 80067f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	4b13      	ldr	r3, [pc, #76]	; (800684c <pvPortMalloc+0x184>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	431a      	orrs	r2, r3
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800680e:	4b13      	ldr	r3, [pc, #76]	; (800685c <pvPortMalloc+0x194>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3301      	adds	r3, #1
 8006814:	4a11      	ldr	r2, [pc, #68]	; (800685c <pvPortMalloc+0x194>)
 8006816:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006818:	f7fe fcfc 	bl	8005214 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <pvPortMalloc+0x174>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	60fb      	str	r3, [r7, #12]
}
 8006838:	bf00      	nop
 800683a:	e7fe      	b.n	800683a <pvPortMalloc+0x172>
	return pvReturn;
 800683c:	69fb      	ldr	r3, [r7, #28]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3728      	adds	r7, #40	; 0x28
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20004a88 	.word	0x20004a88
 800684c:	20004a9c 	.word	0x20004a9c
 8006850:	20004a8c 	.word	0x20004a8c
 8006854:	20004a80 	.word	0x20004a80
 8006858:	20004a90 	.word	0x20004a90
 800685c:	20004a94 	.word	0x20004a94

08006860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d04d      	beq.n	800690e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006872:	2308      	movs	r3, #8
 8006874:	425b      	negs	r3, r3
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4413      	add	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	4b24      	ldr	r3, [pc, #144]	; (8006918 <vPortFree+0xb8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4013      	ands	r3, r2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <vPortFree+0x44>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	60fb      	str	r3, [r7, #12]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00a      	beq.n	80068c2 <vPortFree+0x62>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	60bb      	str	r3, [r7, #8]
}
 80068be:	bf00      	nop
 80068c0:	e7fe      	b.n	80068c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	4b14      	ldr	r3, [pc, #80]	; (8006918 <vPortFree+0xb8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4013      	ands	r3, r2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01e      	beq.n	800690e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d11a      	bne.n	800690e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <vPortFree+0xb8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	43db      	mvns	r3, r3
 80068e2:	401a      	ands	r2, r3
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068e8:	f7fe fc86 	bl	80051f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	4b0a      	ldr	r3, [pc, #40]	; (800691c <vPortFree+0xbc>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4413      	add	r3, r2
 80068f6:	4a09      	ldr	r2, [pc, #36]	; (800691c <vPortFree+0xbc>)
 80068f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068fa:	6938      	ldr	r0, [r7, #16]
 80068fc:	f000 f874 	bl	80069e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006900:	4b07      	ldr	r3, [pc, #28]	; (8006920 <vPortFree+0xc0>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3301      	adds	r3, #1
 8006906:	4a06      	ldr	r2, [pc, #24]	; (8006920 <vPortFree+0xc0>)
 8006908:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800690a:	f7fe fc83 	bl	8005214 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800690e:	bf00      	nop
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	20004a9c 	.word	0x20004a9c
 800691c:	20004a8c 	.word	0x20004a8c
 8006920:	20004a98 	.word	0x20004a98

08006924 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800692a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800692e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006930:	4b27      	ldr	r3, [pc, #156]	; (80069d0 <prvHeapInit+0xac>)
 8006932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00c      	beq.n	8006958 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3307      	adds	r3, #7
 8006942:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0307 	bic.w	r3, r3, #7
 800694a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	4a1f      	ldr	r2, [pc, #124]	; (80069d0 <prvHeapInit+0xac>)
 8006954:	4413      	add	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800695c:	4a1d      	ldr	r2, [pc, #116]	; (80069d4 <prvHeapInit+0xb0>)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006962:	4b1c      	ldr	r3, [pc, #112]	; (80069d4 <prvHeapInit+0xb0>)
 8006964:	2200      	movs	r2, #0
 8006966:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	4413      	add	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006970:	2208      	movs	r2, #8
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0307 	bic.w	r3, r3, #7
 800697e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4a15      	ldr	r2, [pc, #84]	; (80069d8 <prvHeapInit+0xb4>)
 8006984:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006986:	4b14      	ldr	r3, [pc, #80]	; (80069d8 <prvHeapInit+0xb4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2200      	movs	r2, #0
 800698c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800698e:	4b12      	ldr	r3, [pc, #72]	; (80069d8 <prvHeapInit+0xb4>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069a4:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <prvHeapInit+0xb4>)
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	4a0a      	ldr	r2, [pc, #40]	; (80069dc <prvHeapInit+0xb8>)
 80069b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	4a09      	ldr	r2, [pc, #36]	; (80069e0 <prvHeapInit+0xbc>)
 80069ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069bc:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <prvHeapInit+0xc0>)
 80069be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069c2:	601a      	str	r2, [r3, #0]
}
 80069c4:	bf00      	nop
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	20000e80 	.word	0x20000e80
 80069d4:	20004a80 	.word	0x20004a80
 80069d8:	20004a88 	.word	0x20004a88
 80069dc:	20004a90 	.word	0x20004a90
 80069e0:	20004a8c 	.word	0x20004a8c
 80069e4:	20004a9c 	.word	0x20004a9c

080069e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069f0:	4b28      	ldr	r3, [pc, #160]	; (8006a94 <prvInsertBlockIntoFreeList+0xac>)
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	e002      	b.n	80069fc <prvInsertBlockIntoFreeList+0x14>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d8f7      	bhi.n	80069f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	4413      	add	r3, r2
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d108      	bne.n	8006a2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	441a      	add	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	441a      	add	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d118      	bne.n	8006a70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	4b15      	ldr	r3, [pc, #84]	; (8006a98 <prvInsertBlockIntoFreeList+0xb0>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d00d      	beq.n	8006a66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	441a      	add	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	e008      	b.n	8006a78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a66:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <prvInsertBlockIntoFreeList+0xb0>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	e003      	b.n	8006a78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d002      	beq.n	8006a86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a86:	bf00      	nop
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	20004a80 	.word	0x20004a80
 8006a98:	20004a88 	.word	0x20004a88

08006a9c <__errno>:
 8006a9c:	4b01      	ldr	r3, [pc, #4]	; (8006aa4 <__errno+0x8>)
 8006a9e:	6818      	ldr	r0, [r3, #0]
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	2000004c 	.word	0x2000004c

08006aa8 <__libc_init_array>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	4d0d      	ldr	r5, [pc, #52]	; (8006ae0 <__libc_init_array+0x38>)
 8006aac:	4c0d      	ldr	r4, [pc, #52]	; (8006ae4 <__libc_init_array+0x3c>)
 8006aae:	1b64      	subs	r4, r4, r5
 8006ab0:	10a4      	asrs	r4, r4, #2
 8006ab2:	2600      	movs	r6, #0
 8006ab4:	42a6      	cmp	r6, r4
 8006ab6:	d109      	bne.n	8006acc <__libc_init_array+0x24>
 8006ab8:	4d0b      	ldr	r5, [pc, #44]	; (8006ae8 <__libc_init_array+0x40>)
 8006aba:	4c0c      	ldr	r4, [pc, #48]	; (8006aec <__libc_init_array+0x44>)
 8006abc:	f000 fb04 	bl	80070c8 <_init>
 8006ac0:	1b64      	subs	r4, r4, r5
 8006ac2:	10a4      	asrs	r4, r4, #2
 8006ac4:	2600      	movs	r6, #0
 8006ac6:	42a6      	cmp	r6, r4
 8006ac8:	d105      	bne.n	8006ad6 <__libc_init_array+0x2e>
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad0:	4798      	blx	r3
 8006ad2:	3601      	adds	r6, #1
 8006ad4:	e7ee      	b.n	8006ab4 <__libc_init_array+0xc>
 8006ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ada:	4798      	blx	r3
 8006adc:	3601      	adds	r6, #1
 8006ade:	e7f2      	b.n	8006ac6 <__libc_init_array+0x1e>
 8006ae0:	08007304 	.word	0x08007304
 8006ae4:	08007304 	.word	0x08007304
 8006ae8:	08007304 	.word	0x08007304
 8006aec:	08007308 	.word	0x08007308

08006af0 <__retarget_lock_acquire_recursive>:
 8006af0:	4770      	bx	lr

08006af2 <__retarget_lock_release_recursive>:
 8006af2:	4770      	bx	lr

08006af4 <memcpy>:
 8006af4:	440a      	add	r2, r1
 8006af6:	4291      	cmp	r1, r2
 8006af8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006afc:	d100      	bne.n	8006b00 <memcpy+0xc>
 8006afe:	4770      	bx	lr
 8006b00:	b510      	push	{r4, lr}
 8006b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b0a:	4291      	cmp	r1, r2
 8006b0c:	d1f9      	bne.n	8006b02 <memcpy+0xe>
 8006b0e:	bd10      	pop	{r4, pc}

08006b10 <memset>:
 8006b10:	4402      	add	r2, r0
 8006b12:	4603      	mov	r3, r0
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d100      	bne.n	8006b1a <memset+0xa>
 8006b18:	4770      	bx	lr
 8006b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b1e:	e7f9      	b.n	8006b14 <memset+0x4>

08006b20 <cleanup_glue>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	460c      	mov	r4, r1
 8006b24:	6809      	ldr	r1, [r1, #0]
 8006b26:	4605      	mov	r5, r0
 8006b28:	b109      	cbz	r1, 8006b2e <cleanup_glue+0xe>
 8006b2a:	f7ff fff9 	bl	8006b20 <cleanup_glue>
 8006b2e:	4621      	mov	r1, r4
 8006b30:	4628      	mov	r0, r5
 8006b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b36:	f000 b869 	b.w	8006c0c <_free_r>
	...

08006b3c <_reclaim_reent>:
 8006b3c:	4b2c      	ldr	r3, [pc, #176]	; (8006bf0 <_reclaim_reent+0xb4>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4283      	cmp	r3, r0
 8006b42:	b570      	push	{r4, r5, r6, lr}
 8006b44:	4604      	mov	r4, r0
 8006b46:	d051      	beq.n	8006bec <_reclaim_reent+0xb0>
 8006b48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b4a:	b143      	cbz	r3, 8006b5e <_reclaim_reent+0x22>
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d14a      	bne.n	8006be8 <_reclaim_reent+0xac>
 8006b52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b54:	6819      	ldr	r1, [r3, #0]
 8006b56:	b111      	cbz	r1, 8006b5e <_reclaim_reent+0x22>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 f857 	bl	8006c0c <_free_r>
 8006b5e:	6961      	ldr	r1, [r4, #20]
 8006b60:	b111      	cbz	r1, 8006b68 <_reclaim_reent+0x2c>
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 f852 	bl	8006c0c <_free_r>
 8006b68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b6a:	b111      	cbz	r1, 8006b72 <_reclaim_reent+0x36>
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f000 f84d 	bl	8006c0c <_free_r>
 8006b72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b74:	b111      	cbz	r1, 8006b7c <_reclaim_reent+0x40>
 8006b76:	4620      	mov	r0, r4
 8006b78:	f000 f848 	bl	8006c0c <_free_r>
 8006b7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006b7e:	b111      	cbz	r1, 8006b86 <_reclaim_reent+0x4a>
 8006b80:	4620      	mov	r0, r4
 8006b82:	f000 f843 	bl	8006c0c <_free_r>
 8006b86:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006b88:	b111      	cbz	r1, 8006b90 <_reclaim_reent+0x54>
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f000 f83e 	bl	8006c0c <_free_r>
 8006b90:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006b92:	b111      	cbz	r1, 8006b9a <_reclaim_reent+0x5e>
 8006b94:	4620      	mov	r0, r4
 8006b96:	f000 f839 	bl	8006c0c <_free_r>
 8006b9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006b9c:	b111      	cbz	r1, 8006ba4 <_reclaim_reent+0x68>
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f000 f834 	bl	8006c0c <_free_r>
 8006ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ba6:	b111      	cbz	r1, 8006bae <_reclaim_reent+0x72>
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 f82f 	bl	8006c0c <_free_r>
 8006bae:	69a3      	ldr	r3, [r4, #24]
 8006bb0:	b1e3      	cbz	r3, 8006bec <_reclaim_reent+0xb0>
 8006bb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	4798      	blx	r3
 8006bb8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006bba:	b1b9      	cbz	r1, 8006bec <_reclaim_reent+0xb0>
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006bc2:	f7ff bfad 	b.w	8006b20 <cleanup_glue>
 8006bc6:	5949      	ldr	r1, [r1, r5]
 8006bc8:	b941      	cbnz	r1, 8006bdc <_reclaim_reent+0xa0>
 8006bca:	3504      	adds	r5, #4
 8006bcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bce:	2d80      	cmp	r5, #128	; 0x80
 8006bd0:	68d9      	ldr	r1, [r3, #12]
 8006bd2:	d1f8      	bne.n	8006bc6 <_reclaim_reent+0x8a>
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f000 f819 	bl	8006c0c <_free_r>
 8006bda:	e7ba      	b.n	8006b52 <_reclaim_reent+0x16>
 8006bdc:	680e      	ldr	r6, [r1, #0]
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 f814 	bl	8006c0c <_free_r>
 8006be4:	4631      	mov	r1, r6
 8006be6:	e7ef      	b.n	8006bc8 <_reclaim_reent+0x8c>
 8006be8:	2500      	movs	r5, #0
 8006bea:	e7ef      	b.n	8006bcc <_reclaim_reent+0x90>
 8006bec:	bd70      	pop	{r4, r5, r6, pc}
 8006bee:	bf00      	nop
 8006bf0:	2000004c 	.word	0x2000004c

08006bf4 <__malloc_lock>:
 8006bf4:	4801      	ldr	r0, [pc, #4]	; (8006bfc <__malloc_lock+0x8>)
 8006bf6:	f7ff bf7b 	b.w	8006af0 <__retarget_lock_acquire_recursive>
 8006bfa:	bf00      	nop
 8006bfc:	20004e40 	.word	0x20004e40

08006c00 <__malloc_unlock>:
 8006c00:	4801      	ldr	r0, [pc, #4]	; (8006c08 <__malloc_unlock+0x8>)
 8006c02:	f7ff bf76 	b.w	8006af2 <__retarget_lock_release_recursive>
 8006c06:	bf00      	nop
 8006c08:	20004e40 	.word	0x20004e40

08006c0c <_free_r>:
 8006c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c0e:	2900      	cmp	r1, #0
 8006c10:	d048      	beq.n	8006ca4 <_free_r+0x98>
 8006c12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c16:	9001      	str	r0, [sp, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f1a1 0404 	sub.w	r4, r1, #4
 8006c1e:	bfb8      	it	lt
 8006c20:	18e4      	addlt	r4, r4, r3
 8006c22:	f7ff ffe7 	bl	8006bf4 <__malloc_lock>
 8006c26:	4a20      	ldr	r2, [pc, #128]	; (8006ca8 <_free_r+0x9c>)
 8006c28:	9801      	ldr	r0, [sp, #4]
 8006c2a:	6813      	ldr	r3, [r2, #0]
 8006c2c:	4615      	mov	r5, r2
 8006c2e:	b933      	cbnz	r3, 8006c3e <_free_r+0x32>
 8006c30:	6063      	str	r3, [r4, #4]
 8006c32:	6014      	str	r4, [r2, #0]
 8006c34:	b003      	add	sp, #12
 8006c36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c3a:	f7ff bfe1 	b.w	8006c00 <__malloc_unlock>
 8006c3e:	42a3      	cmp	r3, r4
 8006c40:	d90b      	bls.n	8006c5a <_free_r+0x4e>
 8006c42:	6821      	ldr	r1, [r4, #0]
 8006c44:	1862      	adds	r2, r4, r1
 8006c46:	4293      	cmp	r3, r2
 8006c48:	bf04      	itt	eq
 8006c4a:	681a      	ldreq	r2, [r3, #0]
 8006c4c:	685b      	ldreq	r3, [r3, #4]
 8006c4e:	6063      	str	r3, [r4, #4]
 8006c50:	bf04      	itt	eq
 8006c52:	1852      	addeq	r2, r2, r1
 8006c54:	6022      	streq	r2, [r4, #0]
 8006c56:	602c      	str	r4, [r5, #0]
 8006c58:	e7ec      	b.n	8006c34 <_free_r+0x28>
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	b10b      	cbz	r3, 8006c64 <_free_r+0x58>
 8006c60:	42a3      	cmp	r3, r4
 8006c62:	d9fa      	bls.n	8006c5a <_free_r+0x4e>
 8006c64:	6811      	ldr	r1, [r2, #0]
 8006c66:	1855      	adds	r5, r2, r1
 8006c68:	42a5      	cmp	r5, r4
 8006c6a:	d10b      	bne.n	8006c84 <_free_r+0x78>
 8006c6c:	6824      	ldr	r4, [r4, #0]
 8006c6e:	4421      	add	r1, r4
 8006c70:	1854      	adds	r4, r2, r1
 8006c72:	42a3      	cmp	r3, r4
 8006c74:	6011      	str	r1, [r2, #0]
 8006c76:	d1dd      	bne.n	8006c34 <_free_r+0x28>
 8006c78:	681c      	ldr	r4, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	6053      	str	r3, [r2, #4]
 8006c7e:	4421      	add	r1, r4
 8006c80:	6011      	str	r1, [r2, #0]
 8006c82:	e7d7      	b.n	8006c34 <_free_r+0x28>
 8006c84:	d902      	bls.n	8006c8c <_free_r+0x80>
 8006c86:	230c      	movs	r3, #12
 8006c88:	6003      	str	r3, [r0, #0]
 8006c8a:	e7d3      	b.n	8006c34 <_free_r+0x28>
 8006c8c:	6825      	ldr	r5, [r4, #0]
 8006c8e:	1961      	adds	r1, r4, r5
 8006c90:	428b      	cmp	r3, r1
 8006c92:	bf04      	itt	eq
 8006c94:	6819      	ldreq	r1, [r3, #0]
 8006c96:	685b      	ldreq	r3, [r3, #4]
 8006c98:	6063      	str	r3, [r4, #4]
 8006c9a:	bf04      	itt	eq
 8006c9c:	1949      	addeq	r1, r1, r5
 8006c9e:	6021      	streq	r1, [r4, #0]
 8006ca0:	6054      	str	r4, [r2, #4]
 8006ca2:	e7c7      	b.n	8006c34 <_free_r+0x28>
 8006ca4:	b003      	add	sp, #12
 8006ca6:	bd30      	pop	{r4, r5, pc}
 8006ca8:	20004aa0 	.word	0x20004aa0
 8006cac:	00000000 	.word	0x00000000

08006cb0 <log>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	ed2d 8b02 	vpush	{d8}
 8006cb6:	ec55 4b10 	vmov	r4, r5, d0
 8006cba:	f000 f841 	bl	8006d40 <__ieee754_log>
 8006cbe:	4b1e      	ldr	r3, [pc, #120]	; (8006d38 <log+0x88>)
 8006cc0:	eeb0 8a40 	vmov.f32	s16, s0
 8006cc4:	eef0 8a60 	vmov.f32	s17, s1
 8006cc8:	f993 3000 	ldrsb.w	r3, [r3]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	d01a      	beq.n	8006d06 <log+0x56>
 8006cd0:	4622      	mov	r2, r4
 8006cd2:	462b      	mov	r3, r5
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	f7f9 fed0 	bl	8000a7c <__aeabi_dcmpun>
 8006cdc:	b998      	cbnz	r0, 8006d06 <log+0x56>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	f7f9 febf 	bl	8000a68 <__aeabi_dcmpgt>
 8006cea:	b960      	cbnz	r0, 8006d06 <log+0x56>
 8006cec:	2200      	movs	r2, #0
 8006cee:	2300      	movs	r3, #0
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	f7f9 fe90 	bl	8000a18 <__aeabi_dcmpeq>
 8006cf8:	b160      	cbz	r0, 8006d14 <log+0x64>
 8006cfa:	f7ff fecf 	bl	8006a9c <__errno>
 8006cfe:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8006d30 <log+0x80>
 8006d02:	2322      	movs	r3, #34	; 0x22
 8006d04:	6003      	str	r3, [r0, #0]
 8006d06:	eeb0 0a48 	vmov.f32	s0, s16
 8006d0a:	eef0 0a68 	vmov.f32	s1, s17
 8006d0e:	ecbd 8b02 	vpop	{d8}
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	f7ff fec2 	bl	8006a9c <__errno>
 8006d18:	ecbd 8b02 	vpop	{d8}
 8006d1c:	2321      	movs	r3, #33	; 0x21
 8006d1e:	6003      	str	r3, [r0, #0]
 8006d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d24:	4805      	ldr	r0, [pc, #20]	; (8006d3c <log+0x8c>)
 8006d26:	f000 b9c7 	b.w	80070b8 <nan>
 8006d2a:	bf00      	nop
 8006d2c:	f3af 8000 	nop.w
 8006d30:	00000000 	.word	0x00000000
 8006d34:	fff00000 	.word	0xfff00000
 8006d38:	200000b0 	.word	0x200000b0
 8006d3c:	080072f8 	.word	0x080072f8

08006d40 <__ieee754_log>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	ec51 0b10 	vmov	r0, r1, d0
 8006d48:	ed2d 8b04 	vpush	{d8-d9}
 8006d4c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006d50:	b083      	sub	sp, #12
 8006d52:	460d      	mov	r5, r1
 8006d54:	da29      	bge.n	8006daa <__ieee754_log+0x6a>
 8006d56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d5a:	4303      	orrs	r3, r0
 8006d5c:	ee10 2a10 	vmov	r2, s0
 8006d60:	d10c      	bne.n	8006d7c <__ieee754_log+0x3c>
 8006d62:	49cf      	ldr	r1, [pc, #828]	; (80070a0 <__ieee754_log+0x360>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	2300      	movs	r3, #0
 8006d68:	2000      	movs	r0, #0
 8006d6a:	f7f9 fd17 	bl	800079c <__aeabi_ddiv>
 8006d6e:	ec41 0b10 	vmov	d0, r0, r1
 8006d72:	b003      	add	sp, #12
 8006d74:	ecbd 8b04 	vpop	{d8-d9}
 8006d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	da05      	bge.n	8006d8c <__ieee754_log+0x4c>
 8006d80:	460b      	mov	r3, r1
 8006d82:	f7f9 fa29 	bl	80001d8 <__aeabi_dsub>
 8006d86:	2200      	movs	r2, #0
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e7ee      	b.n	8006d6a <__ieee754_log+0x2a>
 8006d8c:	4bc5      	ldr	r3, [pc, #788]	; (80070a4 <__ieee754_log+0x364>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f7f9 fbda 	bl	8000548 <__aeabi_dmul>
 8006d94:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8006d98:	460d      	mov	r5, r1
 8006d9a:	4ac3      	ldr	r2, [pc, #780]	; (80070a8 <__ieee754_log+0x368>)
 8006d9c:	4295      	cmp	r5, r2
 8006d9e:	dd06      	ble.n	8006dae <__ieee754_log+0x6e>
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	f7f9 fa1a 	bl	80001dc <__adddf3>
 8006da8:	e7e1      	b.n	8006d6e <__ieee754_log+0x2e>
 8006daa:	2300      	movs	r3, #0
 8006dac:	e7f5      	b.n	8006d9a <__ieee754_log+0x5a>
 8006dae:	152c      	asrs	r4, r5, #20
 8006db0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006db4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006db8:	441c      	add	r4, r3
 8006dba:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8006dbe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8006dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dc6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8006dca:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8006dce:	ea42 0105 	orr.w	r1, r2, r5
 8006dd2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	4bb4      	ldr	r3, [pc, #720]	; (80070ac <__ieee754_log+0x36c>)
 8006dda:	f7f9 f9fd 	bl	80001d8 <__aeabi_dsub>
 8006dde:	1cab      	adds	r3, r5, #2
 8006de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	4682      	mov	sl, r0
 8006de8:	468b      	mov	fp, r1
 8006dea:	f04f 0200 	mov.w	r2, #0
 8006dee:	dc53      	bgt.n	8006e98 <__ieee754_log+0x158>
 8006df0:	2300      	movs	r3, #0
 8006df2:	f7f9 fe11 	bl	8000a18 <__aeabi_dcmpeq>
 8006df6:	b1d0      	cbz	r0, 8006e2e <__ieee754_log+0xee>
 8006df8:	2c00      	cmp	r4, #0
 8006dfa:	f000 8122 	beq.w	8007042 <__ieee754_log+0x302>
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f7f9 fb38 	bl	8000474 <__aeabi_i2d>
 8006e04:	a390      	add	r3, pc, #576	; (adr r3, 8007048 <__ieee754_log+0x308>)
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	460f      	mov	r7, r1
 8006e0e:	f7f9 fb9b 	bl	8000548 <__aeabi_dmul>
 8006e12:	a38f      	add	r3, pc, #572	; (adr r3, 8007050 <__ieee754_log+0x310>)
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	4604      	mov	r4, r0
 8006e1a:	460d      	mov	r5, r1
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	4639      	mov	r1, r7
 8006e20:	f7f9 fb92 	bl	8000548 <__aeabi_dmul>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4620      	mov	r0, r4
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	e7ba      	b.n	8006da4 <__ieee754_log+0x64>
 8006e2e:	a38a      	add	r3, pc, #552	; (adr r3, 8007058 <__ieee754_log+0x318>)
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	4650      	mov	r0, sl
 8006e36:	4659      	mov	r1, fp
 8006e38:	f7f9 fb86 	bl	8000548 <__aeabi_dmul>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	2000      	movs	r0, #0
 8006e42:	499b      	ldr	r1, [pc, #620]	; (80070b0 <__ieee754_log+0x370>)
 8006e44:	f7f9 f9c8 	bl	80001d8 <__aeabi_dsub>
 8006e48:	4652      	mov	r2, sl
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	460f      	mov	r7, r1
 8006e4e:	465b      	mov	r3, fp
 8006e50:	4650      	mov	r0, sl
 8006e52:	4659      	mov	r1, fp
 8006e54:	f7f9 fb78 	bl	8000548 <__aeabi_dmul>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	4639      	mov	r1, r7
 8006e60:	f7f9 fb72 	bl	8000548 <__aeabi_dmul>
 8006e64:	4606      	mov	r6, r0
 8006e66:	460f      	mov	r7, r1
 8006e68:	b914      	cbnz	r4, 8006e70 <__ieee754_log+0x130>
 8006e6a:	4632      	mov	r2, r6
 8006e6c:	463b      	mov	r3, r7
 8006e6e:	e0a2      	b.n	8006fb6 <__ieee754_log+0x276>
 8006e70:	4620      	mov	r0, r4
 8006e72:	f7f9 faff 	bl	8000474 <__aeabi_i2d>
 8006e76:	a374      	add	r3, pc, #464	; (adr r3, 8007048 <__ieee754_log+0x308>)
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	4680      	mov	r8, r0
 8006e7e:	4689      	mov	r9, r1
 8006e80:	f7f9 fb62 	bl	8000548 <__aeabi_dmul>
 8006e84:	a372      	add	r3, pc, #456	; (adr r3, 8007050 <__ieee754_log+0x310>)
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	460d      	mov	r5, r1
 8006e8e:	4640      	mov	r0, r8
 8006e90:	4649      	mov	r1, r9
 8006e92:	f7f9 fb59 	bl	8000548 <__aeabi_dmul>
 8006e96:	e0a7      	b.n	8006fe8 <__ieee754_log+0x2a8>
 8006e98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e9c:	f7f9 f99e 	bl	80001dc <__adddf3>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4650      	mov	r0, sl
 8006ea6:	4659      	mov	r1, fp
 8006ea8:	f7f9 fc78 	bl	800079c <__aeabi_ddiv>
 8006eac:	ec41 0b18 	vmov	d8, r0, r1
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f7f9 fadf 	bl	8000474 <__aeabi_i2d>
 8006eb6:	ec53 2b18 	vmov	r2, r3, d8
 8006eba:	ec41 0b19 	vmov	d9, r0, r1
 8006ebe:	ec51 0b18 	vmov	r0, r1, d8
 8006ec2:	f7f9 fb41 	bl	8000548 <__aeabi_dmul>
 8006ec6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8006eca:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8006ece:	9301      	str	r3, [sp, #4]
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	4689      	mov	r9, r1
 8006ed8:	f7f9 fb36 	bl	8000548 <__aeabi_dmul>
 8006edc:	a360      	add	r3, pc, #384	; (adr r3, 8007060 <__ieee754_log+0x320>)
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	460f      	mov	r7, r1
 8006ee6:	f7f9 fb2f 	bl	8000548 <__aeabi_dmul>
 8006eea:	a35f      	add	r3, pc, #380	; (adr r3, 8007068 <__ieee754_log+0x328>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f7f9 f974 	bl	80001dc <__adddf3>
 8006ef4:	4632      	mov	r2, r6
 8006ef6:	463b      	mov	r3, r7
 8006ef8:	f7f9 fb26 	bl	8000548 <__aeabi_dmul>
 8006efc:	a35c      	add	r3, pc, #368	; (adr r3, 8007070 <__ieee754_log+0x330>)
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	f7f9 f96b 	bl	80001dc <__adddf3>
 8006f06:	4632      	mov	r2, r6
 8006f08:	463b      	mov	r3, r7
 8006f0a:	f7f9 fb1d 	bl	8000548 <__aeabi_dmul>
 8006f0e:	a35a      	add	r3, pc, #360	; (adr r3, 8007078 <__ieee754_log+0x338>)
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	f7f9 f962 	bl	80001dc <__adddf3>
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	f7f9 fb14 	bl	8000548 <__aeabi_dmul>
 8006f20:	a357      	add	r3, pc, #348	; (adr r3, 8007080 <__ieee754_log+0x340>)
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	4680      	mov	r8, r0
 8006f28:	4689      	mov	r9, r1
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	4639      	mov	r1, r7
 8006f2e:	f7f9 fb0b 	bl	8000548 <__aeabi_dmul>
 8006f32:	a355      	add	r3, pc, #340	; (adr r3, 8007088 <__ieee754_log+0x348>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f7f9 f950 	bl	80001dc <__adddf3>
 8006f3c:	4632      	mov	r2, r6
 8006f3e:	463b      	mov	r3, r7
 8006f40:	f7f9 fb02 	bl	8000548 <__aeabi_dmul>
 8006f44:	a352      	add	r3, pc, #328	; (adr r3, 8007090 <__ieee754_log+0x350>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f7f9 f947 	bl	80001dc <__adddf3>
 8006f4e:	4632      	mov	r2, r6
 8006f50:	463b      	mov	r3, r7
 8006f52:	f7f9 faf9 	bl	8000548 <__aeabi_dmul>
 8006f56:	460b      	mov	r3, r1
 8006f58:	4602      	mov	r2, r0
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	4640      	mov	r0, r8
 8006f5e:	f7f9 f93d 	bl	80001dc <__adddf3>
 8006f62:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006f66:	9b01      	ldr	r3, [sp, #4]
 8006f68:	3551      	adds	r5, #81	; 0x51
 8006f6a:	431d      	orrs	r5, r3
 8006f6c:	2d00      	cmp	r5, #0
 8006f6e:	4680      	mov	r8, r0
 8006f70:	4689      	mov	r9, r1
 8006f72:	dd48      	ble.n	8007006 <__ieee754_log+0x2c6>
 8006f74:	4b4e      	ldr	r3, [pc, #312]	; (80070b0 <__ieee754_log+0x370>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	4650      	mov	r0, sl
 8006f7a:	4659      	mov	r1, fp
 8006f7c:	f7f9 fae4 	bl	8000548 <__aeabi_dmul>
 8006f80:	4652      	mov	r2, sl
 8006f82:	465b      	mov	r3, fp
 8006f84:	f7f9 fae0 	bl	8000548 <__aeabi_dmul>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	460f      	mov	r7, r1
 8006f90:	4640      	mov	r0, r8
 8006f92:	4649      	mov	r1, r9
 8006f94:	f7f9 f922 	bl	80001dc <__adddf3>
 8006f98:	ec53 2b18 	vmov	r2, r3, d8
 8006f9c:	f7f9 fad4 	bl	8000548 <__aeabi_dmul>
 8006fa0:	4680      	mov	r8, r0
 8006fa2:	4689      	mov	r9, r1
 8006fa4:	b964      	cbnz	r4, 8006fc0 <__ieee754_log+0x280>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4630      	mov	r0, r6
 8006fac:	4639      	mov	r1, r7
 8006fae:	f7f9 f913 	bl	80001d8 <__aeabi_dsub>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4650      	mov	r0, sl
 8006fb8:	4659      	mov	r1, fp
 8006fba:	f7f9 f90d 	bl	80001d8 <__aeabi_dsub>
 8006fbe:	e6d6      	b.n	8006d6e <__ieee754_log+0x2e>
 8006fc0:	a321      	add	r3, pc, #132	; (adr r3, 8007048 <__ieee754_log+0x308>)
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	ec51 0b19 	vmov	r0, r1, d9
 8006fca:	f7f9 fabd 	bl	8000548 <__aeabi_dmul>
 8006fce:	a320      	add	r3, pc, #128	; (adr r3, 8007050 <__ieee754_log+0x310>)
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	460d      	mov	r5, r1
 8006fd8:	ec51 0b19 	vmov	r0, r1, d9
 8006fdc:	f7f9 fab4 	bl	8000548 <__aeabi_dmul>
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	f7f9 f8fa 	bl	80001dc <__adddf3>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4630      	mov	r0, r6
 8006fee:	4639      	mov	r1, r7
 8006ff0:	f7f9 f8f2 	bl	80001d8 <__aeabi_dsub>
 8006ff4:	4652      	mov	r2, sl
 8006ff6:	465b      	mov	r3, fp
 8006ff8:	f7f9 f8ee 	bl	80001d8 <__aeabi_dsub>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4620      	mov	r0, r4
 8007002:	4629      	mov	r1, r5
 8007004:	e7d9      	b.n	8006fba <__ieee754_log+0x27a>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4650      	mov	r0, sl
 800700c:	4659      	mov	r1, fp
 800700e:	f7f9 f8e3 	bl	80001d8 <__aeabi_dsub>
 8007012:	ec53 2b18 	vmov	r2, r3, d8
 8007016:	f7f9 fa97 	bl	8000548 <__aeabi_dmul>
 800701a:	4606      	mov	r6, r0
 800701c:	460f      	mov	r7, r1
 800701e:	2c00      	cmp	r4, #0
 8007020:	f43f af23 	beq.w	8006e6a <__ieee754_log+0x12a>
 8007024:	a308      	add	r3, pc, #32	; (adr r3, 8007048 <__ieee754_log+0x308>)
 8007026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702a:	ec51 0b19 	vmov	r0, r1, d9
 800702e:	f7f9 fa8b 	bl	8000548 <__aeabi_dmul>
 8007032:	a307      	add	r3, pc, #28	; (adr r3, 8007050 <__ieee754_log+0x310>)
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	4604      	mov	r4, r0
 800703a:	460d      	mov	r5, r1
 800703c:	ec51 0b19 	vmov	r0, r1, d9
 8007040:	e727      	b.n	8006e92 <__ieee754_log+0x152>
 8007042:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007098 <__ieee754_log+0x358>
 8007046:	e694      	b.n	8006d72 <__ieee754_log+0x32>
 8007048:	fee00000 	.word	0xfee00000
 800704c:	3fe62e42 	.word	0x3fe62e42
 8007050:	35793c76 	.word	0x35793c76
 8007054:	3dea39ef 	.word	0x3dea39ef
 8007058:	55555555 	.word	0x55555555
 800705c:	3fd55555 	.word	0x3fd55555
 8007060:	df3e5244 	.word	0xdf3e5244
 8007064:	3fc2f112 	.word	0x3fc2f112
 8007068:	96cb03de 	.word	0x96cb03de
 800706c:	3fc74664 	.word	0x3fc74664
 8007070:	94229359 	.word	0x94229359
 8007074:	3fd24924 	.word	0x3fd24924
 8007078:	55555593 	.word	0x55555593
 800707c:	3fe55555 	.word	0x3fe55555
 8007080:	d078c69f 	.word	0xd078c69f
 8007084:	3fc39a09 	.word	0x3fc39a09
 8007088:	1d8e78af 	.word	0x1d8e78af
 800708c:	3fcc71c5 	.word	0x3fcc71c5
 8007090:	9997fa04 	.word	0x9997fa04
 8007094:	3fd99999 	.word	0x3fd99999
	...
 80070a0:	c3500000 	.word	0xc3500000
 80070a4:	43500000 	.word	0x43500000
 80070a8:	7fefffff 	.word	0x7fefffff
 80070ac:	3ff00000 	.word	0x3ff00000
 80070b0:	3fe00000 	.word	0x3fe00000
 80070b4:	00000000 	.word	0x00000000

080070b8 <nan>:
 80070b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80070c0 <nan+0x8>
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	00000000 	.word	0x00000000
 80070c4:	7ff80000 	.word	0x7ff80000

080070c8 <_init>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	bf00      	nop
 80070cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ce:	bc08      	pop	{r3}
 80070d0:	469e      	mov	lr, r3
 80070d2:	4770      	bx	lr

080070d4 <_fini>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	bf00      	nop
 80070d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070da:	bc08      	pop	{r3}
 80070dc:	469e      	mov	lr, r3
 80070de:	4770      	bx	lr
